
#=================================================================#
# Template file: ADBase.template
# Database for area detector control using asyn driver and standard asyn device support
# Mark Rivers
# March 9, 2008

#  Using SCANRATE:The ImageJ EPICS_AD_Viewer plugin monitors ArrayCounter_RBV to decide 
#  when there is a new image to display. That means that it will not display faster than
#  the SCANRATE you select.

#=================================================================#
# Template file: NDArrayBase.template
# Database for area detector control using asyn driver and standard asyn device support
# Mark Rivers
# March 9, 2008

###################################################################
#  This record contains the version of ADCore                     #
###################################################################

record(stringin, "ST99:Det:Det4:ADCoreVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.SIM,0,1)ADCORE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the version of the driver or plugin       #
###################################################################

record(stringin, "ST99:Det:Det4:DriverVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.SIM,0,1)DRIVER_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the asyn port name of this detector       #
###################################################################

record(stringin, "ST99:Det:Det4:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.SIM,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records contain basic information about the detector     # 
###################################################################

record(stringin, "ST99:Det:Det4:Manufacturer_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.SIM,0,1)MANUFACTURER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "ST99:Det:Det4:Model_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.SIM,0,1)MODEL")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "ST99:Det:Det4:SerialNumber_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.SIM,0,1)SERIAL_NUMBER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "ST99:Det:Det4:SDKVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.SIM,0,1)SDK_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "ST99:Det:Det4:FirmwareVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.SIM,0,1)FIRMWARE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control acquisition start and stop               #
###################################################################

record(bo, "ST99:Det:Det4:Acquire") {
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(D4.SIM,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ONAM, "Acquire")
   field(VAL,  "0")
   field(FLNK, "ST99:Det:Det4:SetAcquireBusy")
   info(asyn:READBACK, "1")
}

record(bi, "ST99:Det:Det4:Acquire_RBV") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(D4.SIM,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "ST99:Det:Det4:SetAcquireBusy")
{
    field(INPA, "ST99:Det:Det4:Acquire NPP")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(OUT,  "ST99:Det:Det4:AcquireBusy PP")
}

record(busy, "ST99:Det:Det4:AcquireBusy") {
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(VAL,  "0")
}

record(bi, "ST99:Det:Det4:AcquireBusyCB") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(D4.SIM,0,1)ACQUIRE_BUSY")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "ST99:Det:Det4:ClearAcquireBusy") {
    field(INPA, "ST99:Det:Det4:AcquireBusyCB CP")
    field(CALC, "A")
    field(OOPT, "Transition To Zero")
    field(OUT,  "ST99:Det:Det4:AcquireBusy PP")
}

record(bo, "ST99:Det:Det4:WaitForPlugins") {
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(D4.SIM,0,1)WAIT_FOR_PLUGINS")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
}

###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longout, "ST99:Det:Det4:NDimensions")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.SIM,0,1)ARRAY_NDIMENSIONS")
}

record(longin, "ST99:Det:Det4:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.SIM,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform records
record(waveform, "ST99:Det:Det4:Dimensions")
{
    field(DTYP, "asynInt32ArrayOut")
    field(INP,  "@asyn(D4.SIM,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "ST99:Det:Det4:Dim0SA")
}

record(subArray, "ST99:Det:Det4:Dim0SA")
{
    field(INP,  "ST99:Det:Det4:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "ST99:Det:Det4:ArraySize0")
}

record(longin, "ST99:Det:Det4:ArraySize0")
{
    field(INP,  "ST99:Det:Det4:Dim0SA")
    field(FLNK, "ST99:Det:Det4:Dim1SA")
}

record(subArray, "ST99:Det:Det4:Dim1SA")
{
    field(INP,  "ST99:Det:Det4:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "ST99:Det:Det4:ArraySize1")
}

record(longin, "ST99:Det:Det4:ArraySize1")
{
    field(INP,  "ST99:Det:Det4:Dim1SA")
    field(FLNK, "ST99:Det:Det4:Dim2SA")
}

record(subArray, "ST99:Det:Det4:Dim2SA")
{
    field(INP,  "ST99:Det:Det4:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "ST99:Det:Det4:ArraySize2")
}

record(longin, "ST99:Det:Det4:ArraySize2")
{
    field(INP,  "ST99:Det:Det4:Dim2SA")
    field(FLNK, "ST99:Det:Det4:Dim3SA")
}

record(subArray, "ST99:Det:Det4:Dim3SA")
{
    field(INP,  "ST99:Det:Det4:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "ST99:Det:Det4:ArraySize3")
}

record(longin, "ST99:Det:Det4:ArraySize3")
{
    field(INP,  "ST99:Det:Det4:Dim3SA")
    field(FLNK, "ST99:Det:Det4:Dim4SA")
}

record(subArray, "ST99:Det:Det4:Dim4SA")
{
    field(INP,  "ST99:Det:Det4:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "ST99:Det:Det4:ArraySize4")
}

record(longin, "ST99:Det:Det4:ArraySize4")
{
    field(INP,  "ST99:Det:Det4:Dim4SA")
    field(FLNK, "ST99:Det:Det4:Dim5SA")
}

record(subArray, "ST99:Det:Det4:Dim5SA")
{
    field(INP,  "ST99:Det:Det4:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "ST99:Det:Det4:ArraySize5")
}

record(longin, "ST99:Det:Det4:ArraySize5")
{
    field(INP,  "ST99:Det:Det4:Dim5SA")
    field(FLNK, "ST99:Det:Det4:Dim6SA")
}

record(subArray, "ST99:Det:Det4:Dim6SA")
{
    field(INP,  "ST99:Det:Det4:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "ST99:Det:Det4:ArraySize6")
}

record(longin, "ST99:Det:Det4:ArraySize6")
{
    field(INP,  "ST99:Det:Det4:Dim6SA")
    field(FLNK, "ST99:Det:Det4:Dim7SA")
}

record(subArray, "ST99:Det:Det4:Dim7SA")
{
    field(INP,  "ST99:Det:Det4:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "ST99:Det:Det4:ArraySize7")
}

record(longin, "ST99:Det:Det4:ArraySize7")
{
    field(INP,  "ST99:Det:Det4:Dim7SA")
    field(FLNK, "ST99:Det:Det4:Dim8SA")
}

record(subArray, "ST99:Det:Det4:Dim8SA")
{
    field(INP,  "ST99:Det:Det4:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "ST99:Det:Det4:ArraySize8")
}

record(longin, "ST99:Det:Det4:ArraySize8")
{
    field(INP,  "ST99:Det:Det4:Dim8SA")
    field(FLNK, "ST99:Det:Det4:Dim9SA")
}

record(subArray, "ST99:Det:Det4:Dim9SA")
{
    field(INP,  "ST99:Det:Det4:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "ST99:Det:Det4:ArraySize9")
}

record(longin, "ST99:Det:Det4:ArraySize9")
{
    field(INP,  "ST99:Det:Det4:Dim9SA")
}


record(waveform, "ST99:Det:Det4:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(D4.SIM,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "ST99:Det:Det4:Dim0SA_RBV")
    field(SCAN, "I/O Intr")
}

record(subArray, "ST99:Det:Det4:Dim0SA_RBV")
{
    field(INP,  "ST99:Det:Det4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "ST99:Det:Det4:ArraySize0_RBV")
}

record(longin, "ST99:Det:Det4:ArraySize0_RBV")
{
    field(INP,  "ST99:Det:Det4:Dim0SA_RBV")
    field(FLNK, "ST99:Det:Det4:Dim1SA_RBV")
}

record(subArray, "ST99:Det:Det4:Dim1SA_RBV")
{
    field(INP,  "ST99:Det:Det4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "ST99:Det:Det4:ArraySize1_RBV")
}

record(longin, "ST99:Det:Det4:ArraySize1_RBV")
{
    field(INP,  "ST99:Det:Det4:Dim1SA_RBV")
    field(FLNK, "ST99:Det:Det4:Dim2SA_RBV")
}

record(subArray, "ST99:Det:Det4:Dim2SA_RBV")
{
    field(INP,  "ST99:Det:Det4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "ST99:Det:Det4:ArraySize2_RBV")
}

record(longin, "ST99:Det:Det4:ArraySize2_RBV")
{
    field(INP,  "ST99:Det:Det4:Dim2SA_RBV")
    field(FLNK, "ST99:Det:Det4:Dim3SA_RBV")
}

record(subArray, "ST99:Det:Det4:Dim3SA_RBV")
{
    field(INP,  "ST99:Det:Det4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "ST99:Det:Det4:ArraySize3_RBV")
}

record(longin, "ST99:Det:Det4:ArraySize3_RBV")
{
    field(INP,  "ST99:Det:Det4:Dim3SA_RBV")
    field(FLNK, "ST99:Det:Det4:Dim4SA_RBV")
}

record(subArray, "ST99:Det:Det4:Dim4SA_RBV")
{
    field(INP,  "ST99:Det:Det4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "ST99:Det:Det4:ArraySize4_RBV")
}

record(longin, "ST99:Det:Det4:ArraySize4_RBV")
{
    field(INP,  "ST99:Det:Det4:Dim4SA_RBV")
    field(FLNK, "ST99:Det:Det4:Dim5SA_RBV")
}

record(subArray, "ST99:Det:Det4:Dim5SA_RBV")
{
    field(INP,  "ST99:Det:Det4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "ST99:Det:Det4:ArraySize5_RBV")
}

record(longin, "ST99:Det:Det4:ArraySize5_RBV")
{
    field(INP,  "ST99:Det:Det4:Dim5SA_RBV")
    field(FLNK, "ST99:Det:Det4:Dim6SA_RBV")
}

record(subArray, "ST99:Det:Det4:Dim6SA_RBV")
{
    field(INP,  "ST99:Det:Det4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "ST99:Det:Det4:ArraySize6_RBV")
}

record(longin, "ST99:Det:Det4:ArraySize6_RBV")
{
    field(INP,  "ST99:Det:Det4:Dim6SA_RBV")
    field(FLNK, "ST99:Det:Det4:Dim7SA_RBV")
}

record(subArray, "ST99:Det:Det4:Dim7SA_RBV")
{
    field(INP,  "ST99:Det:Det4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "ST99:Det:Det4:ArraySize7_RBV")
}

record(longin, "ST99:Det:Det4:ArraySize7_RBV")
{
    field(INP,  "ST99:Det:Det4:Dim7SA_RBV")
    field(FLNK, "ST99:Det:Det4:Dim8SA_RBV")
}

record(subArray, "ST99:Det:Det4:Dim8SA_RBV")
{
    field(INP,  "ST99:Det:Det4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "ST99:Det:Det4:ArraySize8_RBV")
}

record(longin, "ST99:Det:Det4:ArraySize8_RBV")
{
    field(INP,  "ST99:Det:Det4:Dim8SA_RBV")
    field(FLNK, "ST99:Det:Det4:Dim9SA_RBV")
}

record(subArray, "ST99:Det:Det4:Dim9SA_RBV")
{
    field(INP,  "ST99:Det:Det4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "ST99:Det:Det4:ArraySize9_RBV")
}

record(longin, "ST99:Det:Det4:ArraySize9_RBV")
{
    field(INP,  "ST99:Det:Det4:Dim9SA_RBV")
}


record(mbbi, "ST99:Det:Det4:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.SIM,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.SIM,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.SIM,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.SIM,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:ArraySize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.SIM,0,1)ARRAY_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records have information on the compression              # 
###################################################################
record(stringin, "ST99:Det:Det4:Codec_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.SIM,0,1)CODEC")
   field(VAL,  "")
   field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:CompressedSize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.SIM,0,1)COMPRESSED_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the data type                            # 
###################################################################

record(mbbo, "ST99:Det:Det4:DataType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D4.SIM,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "ST99:Det:Det4:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.SIM,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the color mode                           #
#  These choices must agree with NDColorMode_t in NDArray.h       # 
###################################################################

record(mbbo, "ST99:Det:Det4:ColorMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D4.SIM,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   info(autosaveFields, "VAL")
}

record(mbbi, "ST99:Det:Det4:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.SIM,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamps of the array     #
###################################################################
record(longin, "ST99:Det:Det4:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.SIM,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "ST99:Det:Det4:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(D4.SIM,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:EpicsTSSec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.SIM,0,1)EPICS_TS_SEC")
    field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:EpicsTSNsec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.SIM,0,1)EPICS_TS_NSEC")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "ST99:Det:Det4:ArrayCounter")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.SIM,0,1)ARRAY_COUNTER")
}

record(longin, "ST99:Det:Det4:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.SIM,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# Updated rate calculation to use a smoothing factor w/ guard against negative values
record(calc, "ST99:Det:Det4:ArrayRate_RBV")
{
    field(INPA, "ST99:Det:Det4:ArrayRate_RBV.LB NPP NMS")   # Previous counter value
    field(INPB, "ST99:Det:Det4:ArrayCounter_RBV NPP NMS")   # Current counter value
    field(INPC, "1.0")                                # Delta time in seconds
    field(INPD, "ST99:Det:Det4:ArrayRate_RBV.VAL NPP NMS")  # Previous rate
    field(INPE, "0.0")                 # Smoothing factor
    field(CALC, "(D*E)/C+MAX(0,B-A)*(1-E)/C")
    field(PREC, "2" )
    field(EGU,  "Hz" )
    field(SCAN, "1 second")
}

###################################################################
#  These records control NDArray callacks                         # 
###################################################################
record(bo, "ST99:Det:Det4:ArrayCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.SIM,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(VAL, "1")
    info(autosaveFields, "VAL")
}

record(bi, "ST99:Det:Det4:ArrayCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.SIM,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains macro definitions for the attributes      # 
###################################################################

record(waveform, "ST99:Det:Det4:NDAttributesMacros")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(D4.SIM,0,1)ND_ATTRIBUTES_MACROS")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record is the name of a file defining attributes          # 
###################################################################

record(waveform, "ST99:Det:Det4:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(D4.SIM,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record defines the status of reading attributes file      # 
###################################################################

record(mbbi, "ST99:Det:Det4:NDAttributesStatus")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.SIM,0,1)ND_ATTRIBUTES_STATUS")
    field(ZRVL, "0")
    field(ZRST, "Attributes file OK")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "File not found")
    field(ONSV, "MINOR")
    field(TWVL, "2")
    field(TWST, "XML syntax error")
    field(TWSV, "MAJOR")
    field(THVL, "3")
    field(THST, "Macro substitution error")
    field(THSV, "MAJOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
###################################################################

record(ai, "ST99:Det:Det4:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(D4.SIM,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "ST99:Det:Det4:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(D4.SIM,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "ST99:Det:Det4:PoolAllocBuffers")
   info(autosaveFields, "SCAN")
}

record(longin, "ST99:Det:Det4:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.SIM,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "ST99:Det:Det4:PoolFreeBuffers")
}

record(longin, "ST99:Det:Det4:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.SIM,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "ST99:Det:Det4:PoolUsedBuffers")
}

record(calc, "ST99:Det:Det4:PoolUsedBuffers")
{
    field(INPA, "ST99:Det:Det4:PoolAllocBuffers NPP MS")
    field(INPB, "ST99:Det:Det4:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

record(bo, "ST99:Det:Det4:EmptyFreeList")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D4.SIM,0,1)POOL_EMPTY_FREELIST")
}

record(longin, "ST99:Det:Det4:NumQueuedArrays")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.SIM,0,1)NUM_QUEUED_ARRAYS")
   field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:MaxSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.SIM,0,1)MAX_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:MaxSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.SIM,0,1)MAX_SIZE_Y")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the detector readout                     #
#  including binning, region start and size                       # 
###################################################################

record(longout, "ST99:Det:Det4:BinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D4.SIM,0,1)BIN_X")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "ST99:Det:Det4:BinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.SIM,0,1)BIN_X")
   field(SCAN, "I/O Intr")
}

record(longout, "ST99:Det:Det4:BinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D4.SIM,0,1)BIN_Y")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "ST99:Det:Det4:BinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.SIM,0,1)BIN_Y")
   field(SCAN, "I/O Intr")
}

record(longout, "ST99:Det:Det4:MinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D4.SIM,0,1)MIN_X")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(longin, "ST99:Det:Det4:MinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.SIM,0,1)MIN_X")
   field(SCAN, "I/O Intr")
}

record(longout, "ST99:Det:Det4:MinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D4.SIM,0,1)MIN_Y")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(longin, "ST99:Det:Det4:MinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.SIM,0,1)MIN_Y")
   field(SCAN, "I/O Intr")
}

record(longout, "ST99:Det:Det4:SizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D4.SIM,0,1)SIZE_X")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "ST99:Det:Det4:SizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.SIM,0,1)SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longout, "ST99:Det:Det4:SizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D4.SIM,0,1)SIZE_Y")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "ST99:Det:Det4:SizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.SIM,0,1)SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(bo, "ST99:Det:Det4:ReverseX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D4.SIM,0,1)REVERSE_X")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(bi, "ST99:Det:Det4:ReverseX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.SIM,0,1)REVERSE_X")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "ST99:Det:Det4:ReverseY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D4.SIM,0,1)REVERSE_Y")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(bi, "ST99:Det:Det4:ReverseY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.SIM,0,1)REVERSE_Y")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the acquisition time and                 #
#  period                                                         # 
###################################################################
record(ao, "ST99:Det:Det4:AcquireTime")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(D4.SIM,0,1)ACQ_TIME")
   field(PREC, "3")
   field(VAL,  "1.0")
   info(autosaveFields, "VAL")
}

record(ai, "ST99:Det:Det4:AcquireTime_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(D4.SIM,0,1)ACQ_TIME")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ao, "ST99:Det:Det4:AcquirePeriod")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(D4.SIM,0,1)ACQ_PERIOD")
   field(PREC, "3")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(ai, "ST99:Det:Det4:AcquirePeriod_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(D4.SIM,0,1)ACQ_PERIOD")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ai, "ST99:Det:Det4:TimeRemaining_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(D4.SIM,0,1)TIME_REMAINING")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the gain                                 # 
###################################################################
record(ao, "ST99:Det:Det4:Gain")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(D4.SIM,0,1)GAIN")
   field(VAL,  "1.0")
   field(PREC, "3")
   info(autosaveFields, "VAL")
}

record(ai, "ST99:Det:Det4:Gain_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(D4.SIM,0,1)GAIN")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the frame type                           # 
###################################################################
record(mbbo, "ST99:Det:Det4:FrameType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D4.SIM,0,1)FRAME_TYPE")
   field(ZRST, "Normal")
   field(ZRVL, "0")
   field(ONST, "Background")
   field(ONVL, "1")
   field(TWST, "FlatField")
   field(TWVL, "2")
   field(THST, "DblCorrelation")
   field(THVL, "3")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "ST99:Det:Det4:FrameType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.SIM,0,1)FRAME_TYPE")
   field(ZRST, "Normal")
   field(ZRVL, "0")
   field(ONST, "Background")
   field(ONVL, "1")
   field(TWST, "FlatField")
   field(TWVL, "2")
   field(THST, "DblCorrelation")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the acquisition mode                     # 
###################################################################
record(mbbo, "ST99:Det:Det4:ImageMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D4.SIM,0,1)IMAGE_MODE")
   field(ZRST, "Single")
   field(ZRVL, "0")
   field(ONST, "Multiple")
   field(ONVL, "1")
   field(TWST, "Continuous")
   field(TWVL, "2")
   field(VAL,  "2")
   info(autosaveFields, "VAL")
}

record(mbbi, "ST99:Det:Det4:ImageMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.SIM,0,1)IMAGE_MODE")
   field(ZRST, "Single")
   field(ZRVL, "0")
   field(ONST, "Multiple")
   field(ONVL, "1")
   field(TWST, "Continuous")
   field(TWVL, "2")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the trigger mode                         # 
###################################################################
record(mbbo, "ST99:Det:Det4:TriggerMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D4.SIM,0,1)TRIGGER_MODE")
   field(ZRST, "Internal")
   field(ZRVL, "0")
   field(ONST, "External")
   field(ONVL, "1")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "ST99:Det:Det4:TriggerMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.SIM,0,1)TRIGGER_MODE")
   field(ZRST, "Internal")
   field(ZRVL, "0")
   field(ONST, "External")
   field(ONVL, "1")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the number of exposures and              #
#  number of images                                               # 
###################################################################
record(longout, "ST99:Det:Det4:NumExposures")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D4.SIM,0,1)NEXPOSURES")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "ST99:Det:Det4:NumExposures_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.SIM,0,1)NEXPOSURES")
   field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:NumExposuresCounter_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.SIM,0,1)NEXPOSURES_COUNTER")
   field(SCAN, "I/O Intr")
}
record(longout, "ST99:Det:Det4:NumImages")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D4.SIM,0,1)NIMAGES")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "ST99:Det:Det4:NumImages_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.SIM,0,1)NIMAGES")
   field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:NumImagesCounter_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.SIM,0,1)NIMAGES_COUNTER")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are for the detector state                       # 
###################################################################

record(mbbi, "ST99:Det:Det4:DetectorState_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.SIM,0,1)STATUS")
    field(ZRST, "Idle")
    field(ZRVL, "0")
    field(ZRSV, "NO_ALARM")
    field(ONST, "Acquire")
    field(ONVL, "1")
    field(ONSV, "NO_ALARM")
    field(TWST, "Readout")
    field(TWVL, "2")
    field(TWSV, "NO_ALARM")
    field(THST, "Correct")
    field(THVL, "3")
    field(THSV, "NO_ALARM")
    field(FRST, "Saving")
    field(FRVL, "4")
    field(FRSV, "NO_ALARM")
    field(FVST, "Aborting")
    field(FVVL, "5")
    field(FVSV, "MINOR")
    field(SXST, "Error")
    field(SXVL, "6")
    field(SXSV, "MAJOR")
    field(SVST, "Waiting")
    field(SVVL, "7")
    field(SVSV, "NO_ALARM")
    field(EIST, "Initializing")
    field(EIVL, "8")
    field(EISV, "NO_ALARM")
    field(NIST, "Disconnected")
    field(NIVL, "9")
    field(NISV, "INVALID")
    field(TEST, "Aborted")
    field(TEVL, "10")
    field(TESV, "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide status information                       # 
###################################################################

# Status message.
record(waveform, "ST99:Det:Det4:StatusMessage_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(D4.SIM,0,1)STATUS_MESSAGE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(waveform, "ST99:Det:Det4:StringToServer_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(D4.SIM,0,1)STRING_TO_SERVER")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(waveform, "ST99:Det:Det4:StringFromServer_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(D4.SIM,0,1)STRING_FROM_SERVER")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

################################################################@###
#  This record can be used to force a read of the detector status  # 
####################################################################
record(bo,"ST99:Det:Det4:ReadStatus") {
    field(DTYP,"asynInt32")
    field(OUT, "@asyn(D4.SIM,0,1)READ_STATUS")
    field(VAL, "1")
    field(SCAN,"Passive")
    info(autosaveFields, "SCAN")
}

###################################################################
#  These records control the shutter                              # 
###################################################################

record(mbbo, "ST99:Det:Det4:ShutterMode")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.SIM,0,1)SHUTTER_MODE")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "EPICS PV")
    field(ONVL, "1")
    field(TWST, "Detector output")
    field(TWVL, "2")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(mbbi, "ST99:Det:Det4:ShutterMode_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.SIM,0,1)SHUTTER_MODE")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "EPICS PV")
    field(ONVL, "1")
    field(TWST, "Camera output")
    field(TWVL, "2")
    field(SCAN, "I/O Intr")
}

record(bo, "ST99:Det:Det4:ShutterControl")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.SIM,0,1)SHUTTER_CONTROL")
    field(ZNAM, "Close")
    field(ONAM, "Open")
    field(VAL,  "0")
}

record(bi, "ST99:Det:Det4:ShutterControl_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.SIM,0,1)SHUTTER_CONTROL")
    field(ZNAM, "Close")
    field(ONAM, "Open")
    field(SCAN, "I/O Intr")
}

record(bi, "ST99:Det:Det4:ShutterStatus_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.SIM,0,1)SHUTTER_STATUS")
    field(ZNAM, "Closed")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Open")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "ST99:Det:Det4:ShutterOpenDelay")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(D4.SIM,0,1)SHUTTER_OPEN_DELAY")
   field(PREC, "3")
   field(VAL,  "0.0")
   info(autosaveFields, "VAL")
}

record(ai, "ST99:Det:Det4:ShutterOpenDelay_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(D4.SIM,0,1)SHUTTER_OPEN_DELAY")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ao, "ST99:Det:Det4:ShutterCloseDelay")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(D4.SIM,0,1)SHUTTER_CLOSE_DELAY")
   field(PREC, "3")
   field(VAL,  "0.0")
   info(autosaveFields, "VAL")
}

record(ai, "ST99:Det:Det4:ShutterCloseDelay_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(D4.SIM,0,1)SHUTTER_CLOSE_DELAY")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

# This record changes state when the driver opens/closes an EPICS shutter
record(bi, "ST99:Det:Det4:ShutterControlEPICS")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.SIM,0,1)SHUTTER_CONTROL_EPICS")
    field(ZNAM, "Closed")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Open")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
    field(FLNK, "ST99:Det:Det4:ShutterFanout.PROC")
}

record(fanout, "ST99:Det:Det4:ShutterFanout")
{
    field(LNK1, "ST99:Det:Det4:ShutterOpenEPICS.PROC PP MS")
    field(LNK2, "ST99:Det:Det4:ShutterCloseEPICS.PROC PP MS")
}

record(calcout, "ST99:Det:Det4:ShutterOpenEPICS")
{
    field(INPA, "ST99:Det:Det4:ShutterControlEPICS.VAL NPP NMS")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "1")
    field(OUT,  "")
    info(autosaveFields, "OUT OCAL")
}

record(calcout, "ST99:Det:Det4:ShutterCloseEPICS")
{
    field(INPA, "ST99:Det:Det4:ShutterControlEPICS.VAL NPP NMS")
    field(CALC, "A")
    field(OOPT, "Transition To Zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "0")
    field(OUT,  "")
    info(autosaveFields, "OUT OCAL")
}

record(mbbi, "ST99:Det:Det4:ShutterStatusEPICS_RBV")
{
    field(DTYP, "Raw Soft Channel")
    field(INP,  "test CP MS")
    field(ZRVL, "0")
    field(ZRST, "Closed")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "Open")
    field(ONSV, "MINOR")
    info(autosaveFields, "INP ZRVL ONVL")
}

###################################################################
#  These records control the detector temperature                 # 
###################################################################
 
record(ao, "ST99:Det:Det4:Temperature")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(D4.SIM,0,1)TEMPERATURE")
   field(PREC, "1")
   field(EGU,  "C")
   field(VAL,  "25.0")
   info(autosaveFields, "VAL")
}

record(ai, "ST99:Det:Det4:Temperature_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(D4.SIM,0,1)TEMPERATURE")
   field(PREC, "1")
   field(EGU,  "C")
   field(SCAN, "I/O Intr")
}

record(ai, "ST99:Det:Det4:TemperatureActual")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(D4.SIM,0,1)TEMPERATURE_ACTUAL")
   field(PREC, "1")
   field(EGU,  "C")
   field(SCAN, "I/O Intr")
}


###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"ST99:Det:Det4:AsynIO")
{
    field(PORT, "D4.SIM")
    field(TIB2,"1")
    info("ADType", "ADDriver")
}


# ///
# /// Control profile integration 
# ///
record(bo, "ST99:Det:Det4:Integrate") {
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(D4.SIM,0,1)ADSP_INTEGRATE")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields, "VAL")
}
record(bi, "ST99:Det:Det4:Integrate_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(D4.SIM,0,1)ADSP_INTEGRATE")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  field(SCAN, "I/O Intr")
}

# ///
# /// Elapsed Time
# ///
record(ai, "ST99:Det:Det4:ElapsedTime") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,0,1)ADSP_ELAPSEDTIME")
  field(SCAN, "I/O Intr")
  field(PREC, "3")
  field(EGU, "s")
}

############################################################
# Noise Control

# ///
# /// Control noise
# ///
record(mbbo, "ST99:Det:Det4:NoiseType") {
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(D4.SIM,0,1)ADSP_NOISE_TYPE")
  field(VAL,  "0")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Uniform")
  field(ONVL, "1")
  field(TWST, "Gaussian")
  field(TWVL, "2")
  info(autosaveFields, "VAL")
}
record(mbbi, "ST99:Det:Det4:NoiseType_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(D4.SIM,0,1)ADSP_NOISE_TYPE")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Uniform")
  field(ONVL, "1")
  field(TWST, "Gaussian")
  field(TWVL, "2")
  field(SCAN, "I/O Intr")
}
record(ao, "ST99:Det:Det4:NoiseLevel") {
  field(DESC, "Noise Level")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,0,1)ADSP_NOISE_LEVEL")
  field(VAL, "1")
  field(PREC, "3")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:NoiseLevel_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,0,1)ADSP_NOISE_LEVEL")
  field(SCAN, "I/O Intr")
  field(PREC, "3")	
}


############################################################
# Background Polynomial Coefficients (Cubic Polynomial)

# ///
# /// Background Polynomial Constant Term
# ///
record(ao, "ST99:Det:Det4:BGC0") {
  field(DESC, "Background Coef 0")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,0,1)ADSP_BG_C0X")
  field(PREC, "6")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:BGC0_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,0,1)ADSP_BG_C0X")
  field(SCAN, "I/O Intr")
  field(PREC, "6")	
}

# ///
# /// Background Polynomial Slope
# ///
record(ao, "ST99:Det:Det4:BGC1") {
  field(DESC, "Background Coef 1")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,0,1)ADSP_BG_C1X")
  field(PREC, "6")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:BGC1_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,0,1)ADSP_BG_C1X")
  field(SCAN, "I/O Intr")
  field(PREC, "6")	
}

# ///
# /// Background Polynomial 2nd Order Coefficients
# ///
record(ao, "ST99:Det:Det4:BGC2") {
  field(DESC, "Background Coef 2")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,0,1)ADSP_BG_C2X")
  field(PREC, "6")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:BGC2_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,0,1)ADSP_BG_C2X")
  field(SCAN, "I/O Intr")
  field(PREC, "6")	
}

# ///
# /// Background Polynomial 3rd Order Coefficients
# ///
record(ao, "ST99:Det:Det4:BGC3") {
  field(DESC, "Background Coef 3")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,0,1)ADSP_BG_C3X")
  field(PREC, "6")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:BGC3_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,0,1)ADSP_BG_C3X")
  field(SCAN, "I/O Intr")
  field(PREC, "6")	
}

# ///
# /// Background Polynomial Shift 
# ///
record(ao, "ST99:Det:Det4:BGSH") {
  field(DESC, "Background Shift")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,0,1)ADSP_BG_SHX")
  field(PREC, "6")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:BGSH_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,0,1)ADSP_BG_SHX")
  field(SCAN, "I/O Intr")
  field(PREC, "6")	
}

#################################################################
#
# Macros: (in addition to ADSimPeaks.template)
# PEAK - The peak index (0 based)
#
#################################################################

# ///
# /// Peak Type
# ///
record(mbbo, "ST99:Det:Det4:P0Type") {
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(D4.SIM,0,1)ADSP_PEAK_TYPE1D")
  field(VAL,  "0")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Gaussian")
  field(ONVL, "1")
  field(TWST, "Lorentz")
  field(TWVL, "2")
  field(THST, "Pseudo-Voigt")
  field(THVL, "3")
  info(autosaveFields, "VAL")
}
record(mbbi, "ST99:Det:Det4:P0Type_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(D4.SIM,0,1)ADSP_PEAK_TYPE1D")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Gaussian")
  field(ONVL, "1")
  field(TWST, "Lorentz")
  field(TWVL, "2")
  field(THST, "Pseudo-Voigt")
  field(THVL, "3") 
  field(SCAN, "I/O Intr")
}

# ///
# /// Peak position
# ///
record(ao, "ST99:Det:Det4:P0Pos") {
  field(DESC, "Peak Position")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,0,1)ADSP_PEAK_POSX")
  field(VAL, "1")
  field(PREC, "3")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:P0Pos_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,0,1)ADSP_PEAK_POSX")
  field(SCAN, "I/O Intr")
  field(PREC, "3")	
}

# ///
# /// Peak full width half max (FWHM)
# ///
record(ao, "ST99:Det:Det4:P0FWHM") {
  field(DESC, "Peak FWHM")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,0,1)ADSP_PEAK_FWHMX")
  field(VAL, "1")
  field(PREC, "3")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:P0FWHM_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,0,1)ADSP_PEAK_FWHMX")
  field(SCAN, "I/O Intr")
  field(PREC, "3")	
}

# ///
# /// Peak max
# ///
record(ao, "ST99:Det:Det4:P0Max") {
  field(DESC, "Peak Max")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,0,1)ADSP_PEAK_MAX")
  field(PREC, "3")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:P0Max_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,0,1)ADSP_PEAK_MAX")
  field(SCAN, "I/O Intr")
  field(PREC, "3")	
}

#################################################################
#
# Macros: (in addition to ADSimPeaks.template)
# PEAK - The peak index (0 based)
#
#################################################################

# ///
# /// Peak Type
# ///
record(mbbo, "ST99:Det:Det4:P1Type") {
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(D4.SIM,1,1)ADSP_PEAK_TYPE1D")
  field(VAL,  "0")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Gaussian")
  field(ONVL, "1")
  field(TWST, "Lorentz")
  field(TWVL, "2")
  field(THST, "Pseudo-Voigt")
  field(THVL, "3")
  info(autosaveFields, "VAL")
}
record(mbbi, "ST99:Det:Det4:P1Type_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(D4.SIM,1,1)ADSP_PEAK_TYPE1D")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Gaussian")
  field(ONVL, "1")
  field(TWST, "Lorentz")
  field(TWVL, "2")
  field(THST, "Pseudo-Voigt")
  field(THVL, "3") 
  field(SCAN, "I/O Intr")
}

# ///
# /// Peak position
# ///
record(ao, "ST99:Det:Det4:P1Pos") {
  field(DESC, "Peak Position")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,1,1)ADSP_PEAK_POSX")
  field(VAL, "1")
  field(PREC, "3")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:P1Pos_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,1,1)ADSP_PEAK_POSX")
  field(SCAN, "I/O Intr")
  field(PREC, "3")	
}

# ///
# /// Peak full width half max (FWHM)
# ///
record(ao, "ST99:Det:Det4:P1FWHM") {
  field(DESC, "Peak FWHM")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,1,1)ADSP_PEAK_FWHMX")
  field(VAL, "1")
  field(PREC, "3")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:P1FWHM_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,1,1)ADSP_PEAK_FWHMX")
  field(SCAN, "I/O Intr")
  field(PREC, "3")	
}

# ///
# /// Peak max
# ///
record(ao, "ST99:Det:Det4:P1Max") {
  field(DESC, "Peak Max")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,1,1)ADSP_PEAK_MAX")
  field(PREC, "3")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:P1Max_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,1,1)ADSP_PEAK_MAX")
  field(SCAN, "I/O Intr")
  field(PREC, "3")	
}

#################################################################
#
# Macros: (in addition to ADSimPeaks.template)
# PEAK - The peak index (0 based)
#
#################################################################

# ///
# /// Peak Type
# ///
record(mbbo, "ST99:Det:Det4:P2Type") {
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(D4.SIM,2,1)ADSP_PEAK_TYPE1D")
  field(VAL,  "0")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Gaussian")
  field(ONVL, "1")
  field(TWST, "Lorentz")
  field(TWVL, "2")
  field(THST, "Pseudo-Voigt")
  field(THVL, "3")
  info(autosaveFields, "VAL")
}
record(mbbi, "ST99:Det:Det4:P2Type_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(D4.SIM,2,1)ADSP_PEAK_TYPE1D")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Gaussian")
  field(ONVL, "1")
  field(TWST, "Lorentz")
  field(TWVL, "2")
  field(THST, "Pseudo-Voigt")
  field(THVL, "3") 
  field(SCAN, "I/O Intr")
}

# ///
# /// Peak position
# ///
record(ao, "ST99:Det:Det4:P2Pos") {
  field(DESC, "Peak Position")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,2,1)ADSP_PEAK_POSX")
  field(VAL, "1")
  field(PREC, "3")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:P2Pos_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,2,1)ADSP_PEAK_POSX")
  field(SCAN, "I/O Intr")
  field(PREC, "3")	
}

# ///
# /// Peak full width half max (FWHM)
# ///
record(ao, "ST99:Det:Det4:P2FWHM") {
  field(DESC, "Peak FWHM")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,2,1)ADSP_PEAK_FWHMX")
  field(VAL, "1")
  field(PREC, "3")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:P2FWHM_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,2,1)ADSP_PEAK_FWHMX")
  field(SCAN, "I/O Intr")
  field(PREC, "3")	
}

# ///
# /// Peak max
# ///
record(ao, "ST99:Det:Det4:P2Max") {
  field(DESC, "Peak Max")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,2,1)ADSP_PEAK_MAX")
  field(PREC, "3")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:P2Max_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,2,1)ADSP_PEAK_MAX")
  field(SCAN, "I/O Intr")
  field(PREC, "3")	
}

#################################################################
#
# Macros: (in addition to ADSimPeaks.template)
# PEAK - The peak index (0 based)
#
#################################################################

# ///
# /// Peak Type
# ///
record(mbbo, "ST99:Det:Det4:P3Type") {
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(D4.SIM,3,1)ADSP_PEAK_TYPE1D")
  field(VAL,  "0")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Gaussian")
  field(ONVL, "1")
  field(TWST, "Lorentz")
  field(TWVL, "2")
  field(THST, "Pseudo-Voigt")
  field(THVL, "3")
  info(autosaveFields, "VAL")
}
record(mbbi, "ST99:Det:Det4:P3Type_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(D4.SIM,3,1)ADSP_PEAK_TYPE1D")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Gaussian")
  field(ONVL, "1")
  field(TWST, "Lorentz")
  field(TWVL, "2")
  field(THST, "Pseudo-Voigt")
  field(THVL, "3") 
  field(SCAN, "I/O Intr")
}

# ///
# /// Peak position
# ///
record(ao, "ST99:Det:Det4:P3Pos") {
  field(DESC, "Peak Position")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,3,1)ADSP_PEAK_POSX")
  field(VAL, "1")
  field(PREC, "3")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:P3Pos_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,3,1)ADSP_PEAK_POSX")
  field(SCAN, "I/O Intr")
  field(PREC, "3")	
}

# ///
# /// Peak full width half max (FWHM)
# ///
record(ao, "ST99:Det:Det4:P3FWHM") {
  field(DESC, "Peak FWHM")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,3,1)ADSP_PEAK_FWHMX")
  field(VAL, "1")
  field(PREC, "3")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:P3FWHM_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,3,1)ADSP_PEAK_FWHMX")
  field(SCAN, "I/O Intr")
  field(PREC, "3")	
}

# ///
# /// Peak max
# ///
record(ao, "ST99:Det:Det4:P3Max") {
  field(DESC, "Peak Max")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,3,1)ADSP_PEAK_MAX")
  field(PREC, "3")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:P3Max_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,3,1)ADSP_PEAK_MAX")
  field(SCAN, "I/O Intr")
  field(PREC, "3")	
}

#################################################################
#
# Macros: (in addition to ADSimPeaks.template)
# PEAK - The peak index (0 based)
#
#################################################################

# ///
# /// Peak Type
# ///
record(mbbo, "ST99:Det:Det4:P4Type") {
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(D4.SIM,4,1)ADSP_PEAK_TYPE1D")
  field(VAL,  "0")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Gaussian")
  field(ONVL, "1")
  field(TWST, "Lorentz")
  field(TWVL, "2")
  field(THST, "Pseudo-Voigt")
  field(THVL, "3")
  info(autosaveFields, "VAL")
}
record(mbbi, "ST99:Det:Det4:P4Type_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(D4.SIM,4,1)ADSP_PEAK_TYPE1D")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Gaussian")
  field(ONVL, "1")
  field(TWST, "Lorentz")
  field(TWVL, "2")
  field(THST, "Pseudo-Voigt")
  field(THVL, "3") 
  field(SCAN, "I/O Intr")
}

# ///
# /// Peak position
# ///
record(ao, "ST99:Det:Det4:P4Pos") {
  field(DESC, "Peak Position")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,4,1)ADSP_PEAK_POSX")
  field(VAL, "1")
  field(PREC, "3")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:P4Pos_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,4,1)ADSP_PEAK_POSX")
  field(SCAN, "I/O Intr")
  field(PREC, "3")	
}

# ///
# /// Peak full width half max (FWHM)
# ///
record(ao, "ST99:Det:Det4:P4FWHM") {
  field(DESC, "Peak FWHM")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,4,1)ADSP_PEAK_FWHMX")
  field(VAL, "1")
  field(PREC, "3")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:P4FWHM_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,4,1)ADSP_PEAK_FWHMX")
  field(SCAN, "I/O Intr")
  field(PREC, "3")	
}

# ///
# /// Peak max
# ///
record(ao, "ST99:Det:Det4:P4Max") {
  field(DESC, "Peak Max")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,4,1)ADSP_PEAK_MAX")
  field(PREC, "3")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:P4Max_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,4,1)ADSP_PEAK_MAX")
  field(SCAN, "I/O Intr")
  field(PREC, "3")	
}

#################################################################
#
# Macros: (in addition to ADSimPeaks.template)
# PEAK - The peak index (0 based)
#
#################################################################

# ///
# /// Peak Type
# ///
record(mbbo, "ST99:Det:Det4:P5Type") {
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(D4.SIM,5,1)ADSP_PEAK_TYPE1D")
  field(VAL,  "0")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Gaussian")
  field(ONVL, "1")
  field(TWST, "Lorentz")
  field(TWVL, "2")
  field(THST, "Pseudo-Voigt")
  field(THVL, "3")
  info(autosaveFields, "VAL")
}
record(mbbi, "ST99:Det:Det4:P5Type_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(D4.SIM,5,1)ADSP_PEAK_TYPE1D")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Gaussian")
  field(ONVL, "1")
  field(TWST, "Lorentz")
  field(TWVL, "2")
  field(THST, "Pseudo-Voigt")
  field(THVL, "3") 
  field(SCAN, "I/O Intr")
}

# ///
# /// Peak position
# ///
record(ao, "ST99:Det:Det4:P5Pos") {
  field(DESC, "Peak Position")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,5,1)ADSP_PEAK_POSX")
  field(VAL, "1")
  field(PREC, "3")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:P5Pos_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,5,1)ADSP_PEAK_POSX")
  field(SCAN, "I/O Intr")
  field(PREC, "3")	
}

# ///
# /// Peak full width half max (FWHM)
# ///
record(ao, "ST99:Det:Det4:P5FWHM") {
  field(DESC, "Peak FWHM")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,5,1)ADSP_PEAK_FWHMX")
  field(VAL, "1")
  field(PREC, "3")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:P5FWHM_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,5,1)ADSP_PEAK_FWHMX")
  field(SCAN, "I/O Intr")
  field(PREC, "3")	
}

# ///
# /// Peak max
# ///
record(ao, "ST99:Det:Det4:P5Max") {
  field(DESC, "Peak Max")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,5,1)ADSP_PEAK_MAX")
  field(PREC, "3")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:P5Max_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,5,1)ADSP_PEAK_MAX")
  field(SCAN, "I/O Intr")
  field(PREC, "3")	
}

#################################################################
#
# Macros: (in addition to ADSimPeaks.template)
# PEAK - The peak index (0 based)
#
#################################################################

# ///
# /// Peak Type
# ///
record(mbbo, "ST99:Det:Det4:P6Type") {
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(D4.SIM,6,1)ADSP_PEAK_TYPE1D")
  field(VAL,  "0")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Gaussian")
  field(ONVL, "1")
  field(TWST, "Lorentz")
  field(TWVL, "2")
  field(THST, "Pseudo-Voigt")
  field(THVL, "3")
  info(autosaveFields, "VAL")
}
record(mbbi, "ST99:Det:Det4:P6Type_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(D4.SIM,6,1)ADSP_PEAK_TYPE1D")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Gaussian")
  field(ONVL, "1")
  field(TWST, "Lorentz")
  field(TWVL, "2")
  field(THST, "Pseudo-Voigt")
  field(THVL, "3") 
  field(SCAN, "I/O Intr")
}

# ///
# /// Peak position
# ///
record(ao, "ST99:Det:Det4:P6Pos") {
  field(DESC, "Peak Position")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,6,1)ADSP_PEAK_POSX")
  field(VAL, "1")
  field(PREC, "3")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:P6Pos_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,6,1)ADSP_PEAK_POSX")
  field(SCAN, "I/O Intr")
  field(PREC, "3")	
}

# ///
# /// Peak full width half max (FWHM)
# ///
record(ao, "ST99:Det:Det4:P6FWHM") {
  field(DESC, "Peak FWHM")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,6,1)ADSP_PEAK_FWHMX")
  field(VAL, "1")
  field(PREC, "3")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:P6FWHM_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,6,1)ADSP_PEAK_FWHMX")
  field(SCAN, "I/O Intr")
  field(PREC, "3")	
}

# ///
# /// Peak max
# ///
record(ao, "ST99:Det:Det4:P6Max") {
  field(DESC, "Peak Max")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,6,1)ADSP_PEAK_MAX")
  field(PREC, "3")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:P6Max_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,6,1)ADSP_PEAK_MAX")
  field(SCAN, "I/O Intr")
  field(PREC, "3")	
}

#################################################################
#
# Macros: (in addition to ADSimPeaks.template)
# PEAK - The peak index (0 based)
#
#################################################################

# ///
# /// Peak Type
# ///
record(mbbo, "ST99:Det:Det4:P7Type") {
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(D4.SIM,7,1)ADSP_PEAK_TYPE1D")
  field(VAL,  "0")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Gaussian")
  field(ONVL, "1")
  field(TWST, "Lorentz")
  field(TWVL, "2")
  field(THST, "Pseudo-Voigt")
  field(THVL, "3")
  info(autosaveFields, "VAL")
}
record(mbbi, "ST99:Det:Det4:P7Type_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(D4.SIM,7,1)ADSP_PEAK_TYPE1D")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Gaussian")
  field(ONVL, "1")
  field(TWST, "Lorentz")
  field(TWVL, "2")
  field(THST, "Pseudo-Voigt")
  field(THVL, "3") 
  field(SCAN, "I/O Intr")
}

# ///
# /// Peak position
# ///
record(ao, "ST99:Det:Det4:P7Pos") {
  field(DESC, "Peak Position")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,7,1)ADSP_PEAK_POSX")
  field(VAL, "1")
  field(PREC, "3")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:P7Pos_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,7,1)ADSP_PEAK_POSX")
  field(SCAN, "I/O Intr")
  field(PREC, "3")	
}

# ///
# /// Peak full width half max (FWHM)
# ///
record(ao, "ST99:Det:Det4:P7FWHM") {
  field(DESC, "Peak FWHM")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,7,1)ADSP_PEAK_FWHMX")
  field(VAL, "1")
  field(PREC, "3")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:P7FWHM_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,7,1)ADSP_PEAK_FWHMX")
  field(SCAN, "I/O Intr")
  field(PREC, "3")	
}

# ///
# /// Peak max
# ///
record(ao, "ST99:Det:Det4:P7Max") {
  field(DESC, "Peak Max")
  field(PINI, "YES")	       
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(D4.SIM,7,1)ADSP_PEAK_MAX")
  field(PREC, "3")
  info(autosaveFields, "VAL")
}
record(ai, "ST99:Det:Det4:P7Max_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(D4.SIM,7,1)ADSP_PEAK_MAX")
  field(SCAN, "I/O Intr")
  field(PREC, "3")	
}

#=================================================================#
# Template file: NDCodec.template
# Database for the NDCodec plugin
# Bruno Martins
# June 18, 2018

#=================================================================#
# Template file: NDPluginBase.template
# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

#=================================================================#
# Template file: NDArrayBase.template
# Database for area detector control using asyn driver and standard asyn device support
# Mark Rivers
# March 9, 2008

###################################################################
#  This record contains the version of ADCore                     #
###################################################################

record(stringin, "ST99:Det:Det4:CO1:ADCoreVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.CO1,0,1)ADCORE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the version of the driver or plugin       #
###################################################################

record(stringin, "ST99:Det:Det4:CO1:DriverVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.CO1,0,1)DRIVER_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the asyn port name of this detector       #
###################################################################

record(stringin, "ST99:Det:Det4:CO1:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.CO1,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records contain basic information about the detector     # 
###################################################################

record(stringin, "ST99:Det:Det4:CO1:Manufacturer_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.CO1,0,1)MANUFACTURER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "ST99:Det:Det4:CO1:Model_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.CO1,0,1)MODEL")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "ST99:Det:Det4:CO1:SerialNumber_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.CO1,0,1)SERIAL_NUMBER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "ST99:Det:Det4:CO1:SDKVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.CO1,0,1)SDK_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "ST99:Det:Det4:CO1:FirmwareVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.CO1,0,1)FIRMWARE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control acquisition start and stop               #
###################################################################

record(bo, "ST99:Det:Det4:CO1:Acquire") {
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(D4.CO1,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ONAM, "Acquire")
   field(VAL,  "0")
   field(FLNK, "ST99:Det:Det4:CO1:SetAcquireBusy")
   info(asyn:READBACK, "1")
}

record(bi, "ST99:Det:Det4:CO1:Acquire_RBV") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(D4.CO1,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "ST99:Det:Det4:CO1:SetAcquireBusy")
{
    field(INPA, "ST99:Det:Det4:CO1:Acquire NPP")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(OUT,  "ST99:Det:Det4:CO1:AcquireBusy PP")
}

record(busy, "ST99:Det:Det4:CO1:AcquireBusy") {
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(VAL,  "0")
}

record(bi, "ST99:Det:Det4:CO1:AcquireBusyCB") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(D4.CO1,0,1)ACQUIRE_BUSY")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "ST99:Det:Det4:CO1:ClearAcquireBusy") {
    field(INPA, "ST99:Det:Det4:CO1:AcquireBusyCB CP")
    field(CALC, "A")
    field(OOPT, "Transition To Zero")
    field(OUT,  "ST99:Det:Det4:CO1:AcquireBusy PP")
}

record(bo, "ST99:Det:Det4:CO1:WaitForPlugins") {
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(D4.CO1,0,1)WAIT_FOR_PLUGINS")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
}

###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longout, "ST99:Det:Det4:CO1:NDimensions")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.CO1,0,1)ARRAY_NDIMENSIONS")
}

record(longin, "ST99:Det:Det4:CO1:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.CO1,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform records
record(waveform, "ST99:Det:Det4:CO1:Dimensions")
{
    field(DTYP, "asynInt32ArrayOut")
    field(INP,  "@asyn(D4.CO1,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "ST99:Det:Det4:CO1:Dim0SA")
}

record(subArray, "ST99:Det:Det4:CO1:Dim0SA")
{
    field(INP,  "ST99:Det:Det4:CO1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "ST99:Det:Det4:CO1:ArraySize0")
}

record(longin, "ST99:Det:Det4:CO1:ArraySize0")
{
    field(INP,  "ST99:Det:Det4:CO1:Dim0SA")
    field(FLNK, "ST99:Det:Det4:CO1:Dim1SA")
}

record(subArray, "ST99:Det:Det4:CO1:Dim1SA")
{
    field(INP,  "ST99:Det:Det4:CO1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "ST99:Det:Det4:CO1:ArraySize1")
}

record(longin, "ST99:Det:Det4:CO1:ArraySize1")
{
    field(INP,  "ST99:Det:Det4:CO1:Dim1SA")
    field(FLNK, "ST99:Det:Det4:CO1:Dim2SA")
}

record(subArray, "ST99:Det:Det4:CO1:Dim2SA")
{
    field(INP,  "ST99:Det:Det4:CO1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "ST99:Det:Det4:CO1:ArraySize2")
}

record(longin, "ST99:Det:Det4:CO1:ArraySize2")
{
    field(INP,  "ST99:Det:Det4:CO1:Dim2SA")
    field(FLNK, "ST99:Det:Det4:CO1:Dim3SA")
}

record(subArray, "ST99:Det:Det4:CO1:Dim3SA")
{
    field(INP,  "ST99:Det:Det4:CO1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "ST99:Det:Det4:CO1:ArraySize3")
}

record(longin, "ST99:Det:Det4:CO1:ArraySize3")
{
    field(INP,  "ST99:Det:Det4:CO1:Dim3SA")
    field(FLNK, "ST99:Det:Det4:CO1:Dim4SA")
}

record(subArray, "ST99:Det:Det4:CO1:Dim4SA")
{
    field(INP,  "ST99:Det:Det4:CO1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "ST99:Det:Det4:CO1:ArraySize4")
}

record(longin, "ST99:Det:Det4:CO1:ArraySize4")
{
    field(INP,  "ST99:Det:Det4:CO1:Dim4SA")
    field(FLNK, "ST99:Det:Det4:CO1:Dim5SA")
}

record(subArray, "ST99:Det:Det4:CO1:Dim5SA")
{
    field(INP,  "ST99:Det:Det4:CO1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "ST99:Det:Det4:CO1:ArraySize5")
}

record(longin, "ST99:Det:Det4:CO1:ArraySize5")
{
    field(INP,  "ST99:Det:Det4:CO1:Dim5SA")
    field(FLNK, "ST99:Det:Det4:CO1:Dim6SA")
}

record(subArray, "ST99:Det:Det4:CO1:Dim6SA")
{
    field(INP,  "ST99:Det:Det4:CO1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "ST99:Det:Det4:CO1:ArraySize6")
}

record(longin, "ST99:Det:Det4:CO1:ArraySize6")
{
    field(INP,  "ST99:Det:Det4:CO1:Dim6SA")
    field(FLNK, "ST99:Det:Det4:CO1:Dim7SA")
}

record(subArray, "ST99:Det:Det4:CO1:Dim7SA")
{
    field(INP,  "ST99:Det:Det4:CO1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "ST99:Det:Det4:CO1:ArraySize7")
}

record(longin, "ST99:Det:Det4:CO1:ArraySize7")
{
    field(INP,  "ST99:Det:Det4:CO1:Dim7SA")
    field(FLNK, "ST99:Det:Det4:CO1:Dim8SA")
}

record(subArray, "ST99:Det:Det4:CO1:Dim8SA")
{
    field(INP,  "ST99:Det:Det4:CO1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "ST99:Det:Det4:CO1:ArraySize8")
}

record(longin, "ST99:Det:Det4:CO1:ArraySize8")
{
    field(INP,  "ST99:Det:Det4:CO1:Dim8SA")
    field(FLNK, "ST99:Det:Det4:CO1:Dim9SA")
}

record(subArray, "ST99:Det:Det4:CO1:Dim9SA")
{
    field(INP,  "ST99:Det:Det4:CO1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "ST99:Det:Det4:CO1:ArraySize9")
}

record(longin, "ST99:Det:Det4:CO1:ArraySize9")
{
    field(INP,  "ST99:Det:Det4:CO1:Dim9SA")
}


record(waveform, "ST99:Det:Det4:CO1:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(D4.CO1,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "ST99:Det:Det4:CO1:Dim0SA_RBV")
    field(SCAN, "I/O Intr")
}

record(subArray, "ST99:Det:Det4:CO1:Dim0SA_RBV")
{
    field(INP,  "ST99:Det:Det4:CO1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "ST99:Det:Det4:CO1:ArraySize0_RBV")
}

record(longin, "ST99:Det:Det4:CO1:ArraySize0_RBV")
{
    field(INP,  "ST99:Det:Det4:CO1:Dim0SA_RBV")
    field(FLNK, "ST99:Det:Det4:CO1:Dim1SA_RBV")
}

record(subArray, "ST99:Det:Det4:CO1:Dim1SA_RBV")
{
    field(INP,  "ST99:Det:Det4:CO1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "ST99:Det:Det4:CO1:ArraySize1_RBV")
}

record(longin, "ST99:Det:Det4:CO1:ArraySize1_RBV")
{
    field(INP,  "ST99:Det:Det4:CO1:Dim1SA_RBV")
    field(FLNK, "ST99:Det:Det4:CO1:Dim2SA_RBV")
}

record(subArray, "ST99:Det:Det4:CO1:Dim2SA_RBV")
{
    field(INP,  "ST99:Det:Det4:CO1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "ST99:Det:Det4:CO1:ArraySize2_RBV")
}

record(longin, "ST99:Det:Det4:CO1:ArraySize2_RBV")
{
    field(INP,  "ST99:Det:Det4:CO1:Dim2SA_RBV")
    field(FLNK, "ST99:Det:Det4:CO1:Dim3SA_RBV")
}

record(subArray, "ST99:Det:Det4:CO1:Dim3SA_RBV")
{
    field(INP,  "ST99:Det:Det4:CO1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "ST99:Det:Det4:CO1:ArraySize3_RBV")
}

record(longin, "ST99:Det:Det4:CO1:ArraySize3_RBV")
{
    field(INP,  "ST99:Det:Det4:CO1:Dim3SA_RBV")
    field(FLNK, "ST99:Det:Det4:CO1:Dim4SA_RBV")
}

record(subArray, "ST99:Det:Det4:CO1:Dim4SA_RBV")
{
    field(INP,  "ST99:Det:Det4:CO1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "ST99:Det:Det4:CO1:ArraySize4_RBV")
}

record(longin, "ST99:Det:Det4:CO1:ArraySize4_RBV")
{
    field(INP,  "ST99:Det:Det4:CO1:Dim4SA_RBV")
    field(FLNK, "ST99:Det:Det4:CO1:Dim5SA_RBV")
}

record(subArray, "ST99:Det:Det4:CO1:Dim5SA_RBV")
{
    field(INP,  "ST99:Det:Det4:CO1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "ST99:Det:Det4:CO1:ArraySize5_RBV")
}

record(longin, "ST99:Det:Det4:CO1:ArraySize5_RBV")
{
    field(INP,  "ST99:Det:Det4:CO1:Dim5SA_RBV")
    field(FLNK, "ST99:Det:Det4:CO1:Dim6SA_RBV")
}

record(subArray, "ST99:Det:Det4:CO1:Dim6SA_RBV")
{
    field(INP,  "ST99:Det:Det4:CO1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "ST99:Det:Det4:CO1:ArraySize6_RBV")
}

record(longin, "ST99:Det:Det4:CO1:ArraySize6_RBV")
{
    field(INP,  "ST99:Det:Det4:CO1:Dim6SA_RBV")
    field(FLNK, "ST99:Det:Det4:CO1:Dim7SA_RBV")
}

record(subArray, "ST99:Det:Det4:CO1:Dim7SA_RBV")
{
    field(INP,  "ST99:Det:Det4:CO1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "ST99:Det:Det4:CO1:ArraySize7_RBV")
}

record(longin, "ST99:Det:Det4:CO1:ArraySize7_RBV")
{
    field(INP,  "ST99:Det:Det4:CO1:Dim7SA_RBV")
    field(FLNK, "ST99:Det:Det4:CO1:Dim8SA_RBV")
}

record(subArray, "ST99:Det:Det4:CO1:Dim8SA_RBV")
{
    field(INP,  "ST99:Det:Det4:CO1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "ST99:Det:Det4:CO1:ArraySize8_RBV")
}

record(longin, "ST99:Det:Det4:CO1:ArraySize8_RBV")
{
    field(INP,  "ST99:Det:Det4:CO1:Dim8SA_RBV")
    field(FLNK, "ST99:Det:Det4:CO1:Dim9SA_RBV")
}

record(subArray, "ST99:Det:Det4:CO1:Dim9SA_RBV")
{
    field(INP,  "ST99:Det:Det4:CO1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "ST99:Det:Det4:CO1:ArraySize9_RBV")
}

record(longin, "ST99:Det:Det4:CO1:ArraySize9_RBV")
{
    field(INP,  "ST99:Det:Det4:CO1:Dim9SA_RBV")
}


record(mbbi, "ST99:Det:Det4:CO1:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.CO1,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:CO1:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.CO1,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:CO1:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.CO1,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:CO1:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.CO1,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:CO1:ArraySize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.CO1,0,1)ARRAY_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records have information on the compression              # 
###################################################################
record(stringin, "ST99:Det:Det4:CO1:Codec_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.CO1,0,1)CODEC")
   field(VAL,  "")
   field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:CO1:CompressedSize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.CO1,0,1)COMPRESSED_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the data type                            # 
###################################################################

record(mbbo, "ST99:Det:Det4:CO1:DataType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D4.CO1,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "ST99:Det:Det4:CO1:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.CO1,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the color mode                           #
#  These choices must agree with NDColorMode_t in NDArray.h       # 
###################################################################

record(mbbo, "ST99:Det:Det4:CO1:ColorMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D4.CO1,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   info(autosaveFields, "VAL")
}

record(mbbi, "ST99:Det:Det4:CO1:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.CO1,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamps of the array     #
###################################################################
record(longin, "ST99:Det:Det4:CO1:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.CO1,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "ST99:Det:Det4:CO1:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(D4.CO1,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:CO1:EpicsTSSec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.CO1,0,1)EPICS_TS_SEC")
    field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:CO1:EpicsTSNsec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.CO1,0,1)EPICS_TS_NSEC")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "ST99:Det:Det4:CO1:ArrayCounter")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.CO1,0,1)ARRAY_COUNTER")
}

record(longin, "ST99:Det:Det4:CO1:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.CO1,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# Updated rate calculation to use a smoothing factor w/ guard against negative values
record(calc, "ST99:Det:Det4:CO1:ArrayRate_RBV")
{
    field(INPA, "ST99:Det:Det4:CO1:ArrayRate_RBV.LB NPP NMS")   # Previous counter value
    field(INPB, "ST99:Det:Det4:CO1:ArrayCounter_RBV NPP NMS")   # Current counter value
    field(INPC, "1.0")                                # Delta time in seconds
    field(INPD, "ST99:Det:Det4:CO1:ArrayRate_RBV.VAL NPP NMS")  # Previous rate
    field(INPE, "0.0")                 # Smoothing factor
    field(CALC, "(D*E)/C+MAX(0,B-A)*(1-E)/C")
    field(PREC, "2" )
    field(EGU,  "Hz" )
    field(SCAN, "1 second")
}

###################################################################
#  These records control NDArray callacks                         # 
###################################################################
record(bo, "ST99:Det:Det4:CO1:ArrayCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.CO1,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(VAL, "1")
    info(autosaveFields, "VAL")
}

record(bi, "ST99:Det:Det4:CO1:ArrayCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.CO1,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains macro definitions for the attributes      # 
###################################################################

record(waveform, "ST99:Det:Det4:CO1:NDAttributesMacros")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(D4.CO1,0,1)ND_ATTRIBUTES_MACROS")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record is the name of a file defining attributes          # 
###################################################################

record(waveform, "ST99:Det:Det4:CO1:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(D4.CO1,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record defines the status of reading attributes file      # 
###################################################################

record(mbbi, "ST99:Det:Det4:CO1:NDAttributesStatus")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.CO1,0,1)ND_ATTRIBUTES_STATUS")
    field(ZRVL, "0")
    field(ZRST, "Attributes file OK")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "File not found")
    field(ONSV, "MINOR")
    field(TWVL, "2")
    field(TWST, "XML syntax error")
    field(TWSV, "MAJOR")
    field(THVL, "3")
    field(THST, "Macro substitution error")
    field(THSV, "MAJOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
###################################################################

record(ai, "ST99:Det:Det4:CO1:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(D4.CO1,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "ST99:Det:Det4:CO1:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(D4.CO1,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "ST99:Det:Det4:CO1:PoolAllocBuffers")
   info(autosaveFields, "SCAN")
}

record(longin, "ST99:Det:Det4:CO1:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.CO1,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "ST99:Det:Det4:CO1:PoolFreeBuffers")
}

record(longin, "ST99:Det:Det4:CO1:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.CO1,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "ST99:Det:Det4:CO1:PoolUsedBuffers")
}

record(calc, "ST99:Det:Det4:CO1:PoolUsedBuffers")
{
    field(INPA, "ST99:Det:Det4:CO1:PoolAllocBuffers NPP MS")
    field(INPB, "ST99:Det:Det4:CO1:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

record(bo, "ST99:Det:Det4:CO1:EmptyFreeList")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D4.CO1,0,1)POOL_EMPTY_FREELIST")
}

record(longin, "ST99:Det:Det4:CO1:NumQueuedArrays")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.CO1,0,1)NUM_QUEUED_ARRAYS")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "ST99:Det:Det4:CO1:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.CO1,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "ST99:Det:Det4:CO1:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(D4.CO1,0,1)NDARRAY_PORT")
    field(VAL,  "D4.SIM")
    info(autosaveFields, "VAL")
}

record(stringin, "ST99:Det:Det4:CO1:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(D4.CO1,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "ST99:Det:Det4:CO1:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.CO1,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(longin, "ST99:Det:Det4:CO1:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.CO1,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "ST99:Det:Det4:CO1:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.CO1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(bi, "ST99:Det:Det4:CO1:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.CO1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "ST99:Det:Det4:CO1:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(D4.CO1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
    field(DRVL, "0")
    info(autosaveFields, "VAL")
}

record(ai, "ST99:Det:Det4:CO1:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(D4.CO1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(ao, "ST99:Det:Det4:CO1:MaxArrayRate")
{
    field(DTYP, "Soft Channel")
    field(OUT,  "ST99:Det:Det4:CO1:MaxArrayRate_COUT PP")
    field(EGU,  "Hz")
    field(PREC, "3")
    field(VAL,  "0.0")
    info(autosaveFields, "VAL")
}

record(calcout, "ST99:Det:Det4:CO1:MaxArrayRate_COUT")
{
    field(INPA, "ST99:Det:Det4:CO1:MaxArrayRate")
    field(CALC, "A=0?0:1.0/A")
    field(OUT,  "ST99:Det:Det4:CO1:MinCallbackTime PP")
}

record(calc, "ST99:Det:Det4:CO1:MaxArrayRate_RBV")
{
    field(INPA, "ST99:Det:Det4:CO1:MinCallbackTime_RBV CP")
    field(CALC, "A=0?0:1.0/A")
    field(EGU,  "Hz")
    field(PREC, "3")
    field(SCAN, "Passive")
}

record(ao, "ST99:Det:Det4:CO1:MaxByteRate")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(D4.CO1,0,1)MAX_BYTE_RATE")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
    field(DRVL, "0")
    info(autosaveFields, "VAL")
}

record(ai, "ST99:Det:Det4:CO1:MaxByteRate_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(D4.CO1,0,1)MAX_BYTE_RATE")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the last execution time of the plugin     #
###################################################################
record(ai, "ST99:Det:Det4:CO1:ExecutionTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(D4.CO1,0,1)EXECUTION_TIME")
    field(EGU,  "ms")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record requests that the plugin execute again with the    #
#  same NDArray                                                   #
###################################################################
record(bo, "ST99:Det:Det4:CO1:ProcessPlugin")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.CO1,0,1)PROCESS_PLUGIN")
    field(VAL,  "1")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "ST99:Det:Det4:CO1:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.CO1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(bi, "ST99:Det:Det4:CO1:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.CO1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


record(longout, "ST99:Det:Det4:CO1:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.CO1,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "ST99:Det:Det4:CO1:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.CO1,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longout, "ST99:Det:Det4:CO1:QueueSize")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.CO1,0,1)QUEUE_SIZE")
    field(PINI, "YES")
}

record(longin, "ST99:Det:Det4:CO1:QueueSize_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.CO1,0,1)QUEUE_SIZE")
    field(FLNK, "ST99:Det:Det4:CO1:QueueFreeLow")
    field(SCAN, "I/O Intr")
}

record(calcout, "ST99:Det:Det4:CO1:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "ST99:Det:Det4:CO1:QueueSize")
    field(OUT,  "ST99:Det:Det4:CO1:QueueFree.LOW")
    field(FLNK, "ST99:Det:Det4:CO1:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "ST99:Det:Det4:CO1:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "ST99:Det:Det4:CO1:QueueSize")
   field(OUT,  "ST99:Det:Det4:CO1:QueueUse.HIGH")
   field(FLNK, "ST99:Det:Det4:CO1:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "ST99:Det:Det4:CO1:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "ST99:Det:Det4:CO1:QueueSize")
   field(OUT,  "ST99:Det:Det4:CO1:QueueUse.HIHI")
}

record(longin, "ST99:Det:Det4:CO1:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.CO1,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "ST99:Det:Det4:CO1:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "ST99:Det:Det4:CO1:QueueSize")
    field(INPB, "ST99:Det:Det4:CO1:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}

record(longout, "ST99:Det:Det4:CO1:NumThreads")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.CO1,0,1)NUM_THREADS")
    field(VAL,  "1")
    field(PINI, "YES")
}

record(longin, "ST99:Det:Det4:CO1:NumThreads_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.CO1,0,1)NUM_THREADS")
    field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:CO1:MaxThreads_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.CO1,0,1)MAX_THREADS")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control output array sorting                     #
###################################################################
record(mbbo, "ST99:Det:Det4:CO1:SortMode") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.CO1,0,1)SORT_MODE")
    field(ZRVL, "0")
    field(ZRST, "Unsorted")
    field(ONVL, "1")
    field(ONST, "Sorted")
}

record(mbbi, "ST99:Det:Det4:CO1:SortMode_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.CO1,0,1)SORT_MODE")
    field(ZRVL, "0")
    field(ZRST, "Unsorted")
    field(ONVL, "1")
    field(ONST, "Sorted")
    field(SCAN, "I/O Intr")
}

record(ao, "ST99:Det:Det4:CO1:SortTime") {
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(D4.CO1,0,1)SORT_TIME")
    field(PREC, "3")
    field(VAL, "0.1")
}

record(ai, "ST99:Det:Det4:CO1:SortTime_RBV") {
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(D4.CO1,0,1)SORT_TIME")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(longout, "ST99:Det:Det4:CO1:SortSize")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.CO1,0,1)SORT_SIZE")
    field(VAL,  "20")
    field(PINI, "YES")
}

record(longin, "ST99:Det:Det4:CO1:SortSize_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.CO1,0,1)SORT_SIZE")
    field(FLNK, "ST99:Det:Det4:CO1:SortFreeLow")
    field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:CO1:SortFree") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.CO1,0,1)SORT_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

record(calcout, "ST99:Det:Det4:CO1:SortFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "ST99:Det:Det4:CO1:SortSize")
    field(OUT,  "ST99:Det:Det4:CO1:SortFree.LOW")
}

record(longout, "ST99:Det:Det4:CO1:DroppedOutputArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.CO1,0,1)DROPPED_OUTPUT_ARRAYS")
    field(VAL,  "0")
}

record(longin, "ST99:Det:Det4:CO1:DroppedOutputArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.CO1,0,1)DROPPED_OUTPUT_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longout, "ST99:Det:Det4:CO1:DisorderedArrays")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.CO1,0,1)DISORDERED_ARRAYS")
    field(PINI, "YES")
}

record(longin, "ST99:Det:Det4:CO1:DisorderedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.CO1,0,1)DISORDERED_ARRAYS")
    field(SCAN, "I/O Intr")
}



###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"ST99:Det:Det4:CO1:AsynIO")
{
    field(PORT, "D4.CO1")
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}


record(mbbo, "ST99:Det:Det4:CO1:Mode")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.CO1,0,1)MODE")
    field(ZRST, "Compress")
    field(ZRVL, "0")
    field(ONST, "Decompress")
    field(ONVL, "1")
    info(autosaveFields, "VAL")
}

record(mbbi, "ST99:Det:Det4:CO1:Mode_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.CO1,0,1)MODE")
    field(ZRST, "Compress")
    field(ZRVL, "0")
    field(ONST, "Decompress")
    field(ONVL, "1")
    field(SCAN, "I/O Intr")
}

record(mbbo, "ST99:Det:Det4:CO1:Compressor")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.CO1,0,1)COMPRESSOR")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "JPEG")
    field(ONVL, "1")
    field(TWST, "Blosc")
    field(TWVL, "2")
    field(THST, "LZ4")
    field(THVL, "3")
    field(FRST, "BSLZ4")
    field(FRVL, "4")
    info(autosaveFields, "VAL")
}

record(mbbi, "ST99:Det:Det4:CO1:Compressor_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.CO1,0,1)COMPRESSOR")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "JPEG")
    field(ONVL, "1")
    field(TWST, "Blosc")
    field(TWVL, "2")
    field(THST, "LZ4")
    field(THVL, "3")
    field(FRST, "BSLZ4")
    field(FRVL, "4")
    field(SCAN, "I/O Intr")
}

record(ai, "ST99:Det:Det4:CO1:CompFactor_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(D4.CO1,0,1)COMP_FACTOR")
    field(EGU,  "%")
    field(PREC, "2")
    field(SCAN, "I/O Intr")
}

record(longout, "ST99:Det:Det4:CO1:JPEGQuality")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.CO1,0,1)JPEG_QUALITY")
    field(VAL,  "85")
    field(DRVH, "100")
    field(DRVL, "1")
    info(autosaveFields, "VAL")
}

record(longin, "ST99:Det:Det4:CO1:JPEGQuality_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.CO1,0,1)JPEG_QUALITY")
    field(SCAN, "I/O Intr")
}

record(mbbo, "ST99:Det:Det4:CO1:BloscCompressor")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.CO1,0,1)BLOSC_COMPRESSOR")
    field(ZRST, "BloscLZ")
    field(ZRVL, "0")
    field(ONST, "LZ4")
    field(ONVL, "1")
    field(TWST, "LZ4HC")
    field(TWVL, "2")
    field(THST, "SNAPPY")
    field(THVL, "3")
    field(FRST, "ZLIB")
    field(FRVL, "4")
    field(FVST, "ZSTD")
    field(FVVL, "5")
    info(autosaveFields, "VAL")
}

record(mbbi, "ST99:Det:Det4:CO1:BloscCompressor_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.CO1,0,1)BLOSC_COMPRESSOR")
    field(ZRST, "BloscLZ")
    field(ZRVL, "0")
    field(ONST, "LZ4")
    field(ONVL, "1")
    field(TWST, "LZ4HC")
    field(TWVL, "2")
    field(THST, "SNAPPY")
    field(THVL, "3")
    field(FRST, "ZLIB")
    field(FRVL, "4")
    field(FVST, "ZSTD")
    field(FVVL, "5")
    field(SCAN, "I/O Intr")
}

record(longout, "ST99:Det:Det4:CO1:BloscCLevel")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.CO1,0,1)BLOSC_CLEVEL")
    field(VAL,  "3")
    field(DRVH, "9")
    field(DRVL, "0")
    info(autosaveFields, "VAL")
}

record(longin, "ST99:Det:Det4:CO1:BloscCLevel_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.CO1,0,1)BLOSC_CLEVEL")
    field(SCAN, "I/O Intr")
}

record(mbbo, "ST99:Det:Det4:CO1:BloscShuffle")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.CO1,0,1)BLOSC_SHUFFLE")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "Byte")
    field(ONVL, "1")
    field(TWST, "Bit")
    field(TWVL, "2")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(mbbi, "ST99:Det:Det4:CO1:BloscShuffle_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.CO1,0,1)BLOSC_SHUFFLE")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "Byte")
    field(ONVL, "1")
    field(TWST, "Bit")
    field(TWVL, "2")
    field(SCAN, "I/O Intr")
}

record(longout, "ST99:Det:Det4:CO1:BloscNumThreads")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.CO1,0,1)BLOSC_NUMTHREADS")
    field(VAL,  "1")
    field(DRVL, "1")
    info(autosaveFields, "VAL")
}

record(longin, "ST99:Det:Det4:CO1:BloscNumThreads_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.CO1,0,1)BLOSC_NUMTHREADS")
    field(SCAN, "I/O Intr")
}

record(mbbi, "ST99:Det:Det4:CO1:CodecStatus")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.CO1,0,1)CODEC_STATUS")
    field(ZRVL, "0")
    field(ZRST, "Success")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "Warning")
    field(ONSV, "MINOR")
    field(TWVL, "2")
    field(TWST, "Error")
    field(TWSV, "MAJOR")
    field(SCAN, "I/O Intr")
}

record(waveform, "ST99:Det:Det4:CO1:CodecError")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(D4.CO1,0,1)CODEC_ERROR")
    field(SCAN, "I/O Intr")
    field(FTVL, "CHAR")
    field(NELM, "256")
}
#=================================================================#
# Template file: NDPva.template
# Database for the records specific to the pvAccess plugin
# Bruno Martins
# May 5, 2015

#=================================================================#
# Template file: NDPluginBase.template
# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

#=================================================================#
# Template file: NDArrayBase.template
# Database for area detector control using asyn driver and standard asyn device support
# Mark Rivers
# March 9, 2008

###################################################################
#  This record contains the version of ADCore                     #
###################################################################

record(stringin, "ST99:Det:Det4:PV1:ADCoreVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.PV1,0,1)ADCORE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the version of the driver or plugin       #
###################################################################

record(stringin, "ST99:Det:Det4:PV1:DriverVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.PV1,0,1)DRIVER_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the asyn port name of this detector       #
###################################################################

record(stringin, "ST99:Det:Det4:PV1:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.PV1,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records contain basic information about the detector     # 
###################################################################

record(stringin, "ST99:Det:Det4:PV1:Manufacturer_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.PV1,0,1)MANUFACTURER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "ST99:Det:Det4:PV1:Model_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.PV1,0,1)MODEL")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "ST99:Det:Det4:PV1:SerialNumber_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.PV1,0,1)SERIAL_NUMBER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "ST99:Det:Det4:PV1:SDKVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.PV1,0,1)SDK_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "ST99:Det:Det4:PV1:FirmwareVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.PV1,0,1)FIRMWARE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control acquisition start and stop               #
###################################################################

record(bo, "ST99:Det:Det4:PV1:Acquire") {
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(D4.PV1,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ONAM, "Acquire")
   field(VAL,  "0")
   field(FLNK, "ST99:Det:Det4:PV1:SetAcquireBusy")
   info(asyn:READBACK, "1")
}

record(bi, "ST99:Det:Det4:PV1:Acquire_RBV") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(D4.PV1,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "ST99:Det:Det4:PV1:SetAcquireBusy")
{
    field(INPA, "ST99:Det:Det4:PV1:Acquire NPP")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(OUT,  "ST99:Det:Det4:PV1:AcquireBusy PP")
}

record(busy, "ST99:Det:Det4:PV1:AcquireBusy") {
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(VAL,  "0")
}

record(bi, "ST99:Det:Det4:PV1:AcquireBusyCB") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(D4.PV1,0,1)ACQUIRE_BUSY")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "ST99:Det:Det4:PV1:ClearAcquireBusy") {
    field(INPA, "ST99:Det:Det4:PV1:AcquireBusyCB CP")
    field(CALC, "A")
    field(OOPT, "Transition To Zero")
    field(OUT,  "ST99:Det:Det4:PV1:AcquireBusy PP")
}

record(bo, "ST99:Det:Det4:PV1:WaitForPlugins") {
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(D4.PV1,0,1)WAIT_FOR_PLUGINS")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
}

###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longout, "ST99:Det:Det4:PV1:NDimensions")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.PV1,0,1)ARRAY_NDIMENSIONS")
}

record(longin, "ST99:Det:Det4:PV1:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.PV1,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform records
record(waveform, "ST99:Det:Det4:PV1:Dimensions")
{
    field(DTYP, "asynInt32ArrayOut")
    field(INP,  "@asyn(D4.PV1,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "ST99:Det:Det4:PV1:Dim0SA")
}

record(subArray, "ST99:Det:Det4:PV1:Dim0SA")
{
    field(INP,  "ST99:Det:Det4:PV1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "ST99:Det:Det4:PV1:ArraySize0")
}

record(longin, "ST99:Det:Det4:PV1:ArraySize0")
{
    field(INP,  "ST99:Det:Det4:PV1:Dim0SA")
    field(FLNK, "ST99:Det:Det4:PV1:Dim1SA")
}

record(subArray, "ST99:Det:Det4:PV1:Dim1SA")
{
    field(INP,  "ST99:Det:Det4:PV1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "ST99:Det:Det4:PV1:ArraySize1")
}

record(longin, "ST99:Det:Det4:PV1:ArraySize1")
{
    field(INP,  "ST99:Det:Det4:PV1:Dim1SA")
    field(FLNK, "ST99:Det:Det4:PV1:Dim2SA")
}

record(subArray, "ST99:Det:Det4:PV1:Dim2SA")
{
    field(INP,  "ST99:Det:Det4:PV1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "ST99:Det:Det4:PV1:ArraySize2")
}

record(longin, "ST99:Det:Det4:PV1:ArraySize2")
{
    field(INP,  "ST99:Det:Det4:PV1:Dim2SA")
    field(FLNK, "ST99:Det:Det4:PV1:Dim3SA")
}

record(subArray, "ST99:Det:Det4:PV1:Dim3SA")
{
    field(INP,  "ST99:Det:Det4:PV1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "ST99:Det:Det4:PV1:ArraySize3")
}

record(longin, "ST99:Det:Det4:PV1:ArraySize3")
{
    field(INP,  "ST99:Det:Det4:PV1:Dim3SA")
    field(FLNK, "ST99:Det:Det4:PV1:Dim4SA")
}

record(subArray, "ST99:Det:Det4:PV1:Dim4SA")
{
    field(INP,  "ST99:Det:Det4:PV1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "ST99:Det:Det4:PV1:ArraySize4")
}

record(longin, "ST99:Det:Det4:PV1:ArraySize4")
{
    field(INP,  "ST99:Det:Det4:PV1:Dim4SA")
    field(FLNK, "ST99:Det:Det4:PV1:Dim5SA")
}

record(subArray, "ST99:Det:Det4:PV1:Dim5SA")
{
    field(INP,  "ST99:Det:Det4:PV1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "ST99:Det:Det4:PV1:ArraySize5")
}

record(longin, "ST99:Det:Det4:PV1:ArraySize5")
{
    field(INP,  "ST99:Det:Det4:PV1:Dim5SA")
    field(FLNK, "ST99:Det:Det4:PV1:Dim6SA")
}

record(subArray, "ST99:Det:Det4:PV1:Dim6SA")
{
    field(INP,  "ST99:Det:Det4:PV1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "ST99:Det:Det4:PV1:ArraySize6")
}

record(longin, "ST99:Det:Det4:PV1:ArraySize6")
{
    field(INP,  "ST99:Det:Det4:PV1:Dim6SA")
    field(FLNK, "ST99:Det:Det4:PV1:Dim7SA")
}

record(subArray, "ST99:Det:Det4:PV1:Dim7SA")
{
    field(INP,  "ST99:Det:Det4:PV1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "ST99:Det:Det4:PV1:ArraySize7")
}

record(longin, "ST99:Det:Det4:PV1:ArraySize7")
{
    field(INP,  "ST99:Det:Det4:PV1:Dim7SA")
    field(FLNK, "ST99:Det:Det4:PV1:Dim8SA")
}

record(subArray, "ST99:Det:Det4:PV1:Dim8SA")
{
    field(INP,  "ST99:Det:Det4:PV1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "ST99:Det:Det4:PV1:ArraySize8")
}

record(longin, "ST99:Det:Det4:PV1:ArraySize8")
{
    field(INP,  "ST99:Det:Det4:PV1:Dim8SA")
    field(FLNK, "ST99:Det:Det4:PV1:Dim9SA")
}

record(subArray, "ST99:Det:Det4:PV1:Dim9SA")
{
    field(INP,  "ST99:Det:Det4:PV1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "ST99:Det:Det4:PV1:ArraySize9")
}

record(longin, "ST99:Det:Det4:PV1:ArraySize9")
{
    field(INP,  "ST99:Det:Det4:PV1:Dim9SA")
}


record(waveform, "ST99:Det:Det4:PV1:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(D4.PV1,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "ST99:Det:Det4:PV1:Dim0SA_RBV")
    field(SCAN, "I/O Intr")
}

record(subArray, "ST99:Det:Det4:PV1:Dim0SA_RBV")
{
    field(INP,  "ST99:Det:Det4:PV1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "ST99:Det:Det4:PV1:ArraySize0_RBV")
}

record(longin, "ST99:Det:Det4:PV1:ArraySize0_RBV")
{
    field(INP,  "ST99:Det:Det4:PV1:Dim0SA_RBV")
    field(FLNK, "ST99:Det:Det4:PV1:Dim1SA_RBV")
}

record(subArray, "ST99:Det:Det4:PV1:Dim1SA_RBV")
{
    field(INP,  "ST99:Det:Det4:PV1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "ST99:Det:Det4:PV1:ArraySize1_RBV")
}

record(longin, "ST99:Det:Det4:PV1:ArraySize1_RBV")
{
    field(INP,  "ST99:Det:Det4:PV1:Dim1SA_RBV")
    field(FLNK, "ST99:Det:Det4:PV1:Dim2SA_RBV")
}

record(subArray, "ST99:Det:Det4:PV1:Dim2SA_RBV")
{
    field(INP,  "ST99:Det:Det4:PV1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "ST99:Det:Det4:PV1:ArraySize2_RBV")
}

record(longin, "ST99:Det:Det4:PV1:ArraySize2_RBV")
{
    field(INP,  "ST99:Det:Det4:PV1:Dim2SA_RBV")
    field(FLNK, "ST99:Det:Det4:PV1:Dim3SA_RBV")
}

record(subArray, "ST99:Det:Det4:PV1:Dim3SA_RBV")
{
    field(INP,  "ST99:Det:Det4:PV1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "ST99:Det:Det4:PV1:ArraySize3_RBV")
}

record(longin, "ST99:Det:Det4:PV1:ArraySize3_RBV")
{
    field(INP,  "ST99:Det:Det4:PV1:Dim3SA_RBV")
    field(FLNK, "ST99:Det:Det4:PV1:Dim4SA_RBV")
}

record(subArray, "ST99:Det:Det4:PV1:Dim4SA_RBV")
{
    field(INP,  "ST99:Det:Det4:PV1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "ST99:Det:Det4:PV1:ArraySize4_RBV")
}

record(longin, "ST99:Det:Det4:PV1:ArraySize4_RBV")
{
    field(INP,  "ST99:Det:Det4:PV1:Dim4SA_RBV")
    field(FLNK, "ST99:Det:Det4:PV1:Dim5SA_RBV")
}

record(subArray, "ST99:Det:Det4:PV1:Dim5SA_RBV")
{
    field(INP,  "ST99:Det:Det4:PV1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "ST99:Det:Det4:PV1:ArraySize5_RBV")
}

record(longin, "ST99:Det:Det4:PV1:ArraySize5_RBV")
{
    field(INP,  "ST99:Det:Det4:PV1:Dim5SA_RBV")
    field(FLNK, "ST99:Det:Det4:PV1:Dim6SA_RBV")
}

record(subArray, "ST99:Det:Det4:PV1:Dim6SA_RBV")
{
    field(INP,  "ST99:Det:Det4:PV1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "ST99:Det:Det4:PV1:ArraySize6_RBV")
}

record(longin, "ST99:Det:Det4:PV1:ArraySize6_RBV")
{
    field(INP,  "ST99:Det:Det4:PV1:Dim6SA_RBV")
    field(FLNK, "ST99:Det:Det4:PV1:Dim7SA_RBV")
}

record(subArray, "ST99:Det:Det4:PV1:Dim7SA_RBV")
{
    field(INP,  "ST99:Det:Det4:PV1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "ST99:Det:Det4:PV1:ArraySize7_RBV")
}

record(longin, "ST99:Det:Det4:PV1:ArraySize7_RBV")
{
    field(INP,  "ST99:Det:Det4:PV1:Dim7SA_RBV")
    field(FLNK, "ST99:Det:Det4:PV1:Dim8SA_RBV")
}

record(subArray, "ST99:Det:Det4:PV1:Dim8SA_RBV")
{
    field(INP,  "ST99:Det:Det4:PV1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "ST99:Det:Det4:PV1:ArraySize8_RBV")
}

record(longin, "ST99:Det:Det4:PV1:ArraySize8_RBV")
{
    field(INP,  "ST99:Det:Det4:PV1:Dim8SA_RBV")
    field(FLNK, "ST99:Det:Det4:PV1:Dim9SA_RBV")
}

record(subArray, "ST99:Det:Det4:PV1:Dim9SA_RBV")
{
    field(INP,  "ST99:Det:Det4:PV1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "ST99:Det:Det4:PV1:ArraySize9_RBV")
}

record(longin, "ST99:Det:Det4:PV1:ArraySize9_RBV")
{
    field(INP,  "ST99:Det:Det4:PV1:Dim9SA_RBV")
}


record(mbbi, "ST99:Det:Det4:PV1:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.PV1,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:PV1:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.PV1,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:PV1:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.PV1,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:PV1:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.PV1,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:PV1:ArraySize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.PV1,0,1)ARRAY_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records have information on the compression              # 
###################################################################
record(stringin, "ST99:Det:Det4:PV1:Codec_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.PV1,0,1)CODEC")
   field(VAL,  "")
   field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:PV1:CompressedSize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.PV1,0,1)COMPRESSED_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the data type                            # 
###################################################################

record(mbbo, "ST99:Det:Det4:PV1:DataType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D4.PV1,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "ST99:Det:Det4:PV1:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.PV1,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the color mode                           #
#  These choices must agree with NDColorMode_t in NDArray.h       # 
###################################################################

record(mbbo, "ST99:Det:Det4:PV1:ColorMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D4.PV1,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   info(autosaveFields, "VAL")
}

record(mbbi, "ST99:Det:Det4:PV1:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.PV1,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamps of the array     #
###################################################################
record(longin, "ST99:Det:Det4:PV1:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.PV1,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "ST99:Det:Det4:PV1:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(D4.PV1,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:PV1:EpicsTSSec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.PV1,0,1)EPICS_TS_SEC")
    field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:PV1:EpicsTSNsec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.PV1,0,1)EPICS_TS_NSEC")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "ST99:Det:Det4:PV1:ArrayCounter")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.PV1,0,1)ARRAY_COUNTER")
}

record(longin, "ST99:Det:Det4:PV1:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.PV1,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# Updated rate calculation to use a smoothing factor w/ guard against negative values
record(calc, "ST99:Det:Det4:PV1:ArrayRate_RBV")
{
    field(INPA, "ST99:Det:Det4:PV1:ArrayRate_RBV.LB NPP NMS")   # Previous counter value
    field(INPB, "ST99:Det:Det4:PV1:ArrayCounter_RBV NPP NMS")   # Current counter value
    field(INPC, "1.0")                                # Delta time in seconds
    field(INPD, "ST99:Det:Det4:PV1:ArrayRate_RBV.VAL NPP NMS")  # Previous rate
    field(INPE, "0.0")                 # Smoothing factor
    field(CALC, "(D*E)/C+MAX(0,B-A)*(1-E)/C")
    field(PREC, "2" )
    field(EGU,  "Hz" )
    field(SCAN, "1 second")
}

###################################################################
#  These records control NDArray callacks                         # 
###################################################################
record(bo, "ST99:Det:Det4:PV1:ArrayCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.PV1,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(VAL, "1")
    info(autosaveFields, "VAL")
}

record(bi, "ST99:Det:Det4:PV1:ArrayCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.PV1,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains macro definitions for the attributes      # 
###################################################################

record(waveform, "ST99:Det:Det4:PV1:NDAttributesMacros")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(D4.PV1,0,1)ND_ATTRIBUTES_MACROS")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record is the name of a file defining attributes          # 
###################################################################

record(waveform, "ST99:Det:Det4:PV1:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(D4.PV1,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record defines the status of reading attributes file      # 
###################################################################

record(mbbi, "ST99:Det:Det4:PV1:NDAttributesStatus")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.PV1,0,1)ND_ATTRIBUTES_STATUS")
    field(ZRVL, "0")
    field(ZRST, "Attributes file OK")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "File not found")
    field(ONSV, "MINOR")
    field(TWVL, "2")
    field(TWST, "XML syntax error")
    field(TWSV, "MAJOR")
    field(THVL, "3")
    field(THST, "Macro substitution error")
    field(THSV, "MAJOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
###################################################################

record(ai, "ST99:Det:Det4:PV1:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(D4.PV1,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "ST99:Det:Det4:PV1:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(D4.PV1,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "ST99:Det:Det4:PV1:PoolAllocBuffers")
   info(autosaveFields, "SCAN")
}

record(longin, "ST99:Det:Det4:PV1:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.PV1,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "ST99:Det:Det4:PV1:PoolFreeBuffers")
}

record(longin, "ST99:Det:Det4:PV1:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.PV1,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "ST99:Det:Det4:PV1:PoolUsedBuffers")
}

record(calc, "ST99:Det:Det4:PV1:PoolUsedBuffers")
{
    field(INPA, "ST99:Det:Det4:PV1:PoolAllocBuffers NPP MS")
    field(INPB, "ST99:Det:Det4:PV1:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

record(bo, "ST99:Det:Det4:PV1:EmptyFreeList")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D4.PV1,0,1)POOL_EMPTY_FREELIST")
}

record(longin, "ST99:Det:Det4:PV1:NumQueuedArrays")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D4.PV1,0,1)NUM_QUEUED_ARRAYS")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "ST99:Det:Det4:PV1:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D4.PV1,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "ST99:Det:Det4:PV1:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(D4.PV1,0,1)NDARRAY_PORT")
    field(VAL,  "D4.CO1")
    info(autosaveFields, "VAL")
}

record(stringin, "ST99:Det:Det4:PV1:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(D4.PV1,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "ST99:Det:Det4:PV1:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.PV1,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(longin, "ST99:Det:Det4:PV1:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.PV1,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "ST99:Det:Det4:PV1:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.PV1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(bi, "ST99:Det:Det4:PV1:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.PV1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "ST99:Det:Det4:PV1:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(D4.PV1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
    field(DRVL, "0")
    info(autosaveFields, "VAL")
}

record(ai, "ST99:Det:Det4:PV1:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(D4.PV1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(ao, "ST99:Det:Det4:PV1:MaxArrayRate")
{
    field(DTYP, "Soft Channel")
    field(OUT,  "ST99:Det:Det4:PV1:MaxArrayRate_COUT PP")
    field(EGU,  "Hz")
    field(PREC, "3")
    field(VAL,  "0.0")
    info(autosaveFields, "VAL")
}

record(calcout, "ST99:Det:Det4:PV1:MaxArrayRate_COUT")
{
    field(INPA, "ST99:Det:Det4:PV1:MaxArrayRate")
    field(CALC, "A=0?0:1.0/A")
    field(OUT,  "ST99:Det:Det4:PV1:MinCallbackTime PP")
}

record(calc, "ST99:Det:Det4:PV1:MaxArrayRate_RBV")
{
    field(INPA, "ST99:Det:Det4:PV1:MinCallbackTime_RBV CP")
    field(CALC, "A=0?0:1.0/A")
    field(EGU,  "Hz")
    field(PREC, "3")
    field(SCAN, "Passive")
}

record(ao, "ST99:Det:Det4:PV1:MaxByteRate")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(D4.PV1,0,1)MAX_BYTE_RATE")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
    field(DRVL, "0")
    info(autosaveFields, "VAL")
}

record(ai, "ST99:Det:Det4:PV1:MaxByteRate_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(D4.PV1,0,1)MAX_BYTE_RATE")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the last execution time of the plugin     #
###################################################################
record(ai, "ST99:Det:Det4:PV1:ExecutionTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(D4.PV1,0,1)EXECUTION_TIME")
    field(EGU,  "ms")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record requests that the plugin execute again with the    #
#  same NDArray                                                   #
###################################################################
record(bo, "ST99:Det:Det4:PV1:ProcessPlugin")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.PV1,0,1)PROCESS_PLUGIN")
    field(VAL,  "1")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "ST99:Det:Det4:PV1:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.PV1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(bi, "ST99:Det:Det4:PV1:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.PV1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


record(longout, "ST99:Det:Det4:PV1:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.PV1,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "ST99:Det:Det4:PV1:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.PV1,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longout, "ST99:Det:Det4:PV1:QueueSize")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.PV1,0,1)QUEUE_SIZE")
    field(PINI, "YES")
}

record(longin, "ST99:Det:Det4:PV1:QueueSize_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.PV1,0,1)QUEUE_SIZE")
    field(FLNK, "ST99:Det:Det4:PV1:QueueFreeLow")
    field(SCAN, "I/O Intr")
}

record(calcout, "ST99:Det:Det4:PV1:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "ST99:Det:Det4:PV1:QueueSize")
    field(OUT,  "ST99:Det:Det4:PV1:QueueFree.LOW")
    field(FLNK, "ST99:Det:Det4:PV1:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "ST99:Det:Det4:PV1:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "ST99:Det:Det4:PV1:QueueSize")
   field(OUT,  "ST99:Det:Det4:PV1:QueueUse.HIGH")
   field(FLNK, "ST99:Det:Det4:PV1:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "ST99:Det:Det4:PV1:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "ST99:Det:Det4:PV1:QueueSize")
   field(OUT,  "ST99:Det:Det4:PV1:QueueUse.HIHI")
}

record(longin, "ST99:Det:Det4:PV1:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.PV1,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "ST99:Det:Det4:PV1:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "ST99:Det:Det4:PV1:QueueSize")
    field(INPB, "ST99:Det:Det4:PV1:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}

record(longout, "ST99:Det:Det4:PV1:NumThreads")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.PV1,0,1)NUM_THREADS")
    field(VAL,  "1")
    field(PINI, "YES")
}

record(longin, "ST99:Det:Det4:PV1:NumThreads_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.PV1,0,1)NUM_THREADS")
    field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:PV1:MaxThreads_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.PV1,0,1)MAX_THREADS")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control output array sorting                     #
###################################################################
record(mbbo, "ST99:Det:Det4:PV1:SortMode") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.PV1,0,1)SORT_MODE")
    field(ZRVL, "0")
    field(ZRST, "Unsorted")
    field(ONVL, "1")
    field(ONST, "Sorted")
}

record(mbbi, "ST99:Det:Det4:PV1:SortMode_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.PV1,0,1)SORT_MODE")
    field(ZRVL, "0")
    field(ZRST, "Unsorted")
    field(ONVL, "1")
    field(ONST, "Sorted")
    field(SCAN, "I/O Intr")
}

record(ao, "ST99:Det:Det4:PV1:SortTime") {
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(D4.PV1,0,1)SORT_TIME")
    field(PREC, "3")
    field(VAL, "0.1")
}

record(ai, "ST99:Det:Det4:PV1:SortTime_RBV") {
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(D4.PV1,0,1)SORT_TIME")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(longout, "ST99:Det:Det4:PV1:SortSize")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.PV1,0,1)SORT_SIZE")
    field(VAL,  "20")
    field(PINI, "YES")
}

record(longin, "ST99:Det:Det4:PV1:SortSize_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.PV1,0,1)SORT_SIZE")
    field(FLNK, "ST99:Det:Det4:PV1:SortFreeLow")
    field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det4:PV1:SortFree") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.PV1,0,1)SORT_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

record(calcout, "ST99:Det:Det4:PV1:SortFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "ST99:Det:Det4:PV1:SortSize")
    field(OUT,  "ST99:Det:Det4:PV1:SortFree.LOW")
}

record(longout, "ST99:Det:Det4:PV1:DroppedOutputArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.PV1,0,1)DROPPED_OUTPUT_ARRAYS")
    field(VAL,  "0")
}

record(longin, "ST99:Det:Det4:PV1:DroppedOutputArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.PV1,0,1)DROPPED_OUTPUT_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longout, "ST99:Det:Det4:PV1:DisorderedArrays")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D4.PV1,0,1)DISORDERED_ARRAYS")
    field(PINI, "YES")
}

record(longin, "ST99:Det:Det4:PV1:DisorderedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D4.PV1,0,1)DISORDERED_ARRAYS")
    field(SCAN, "I/O Intr")
}



###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"ST99:Det:Det4:PV1:AsynIO")
{
    field(PORT, "D4.PV1")
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}


# New records for NDPluginPva

record(waveform, "ST99:Det:Det4:PV1:PvName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(D4.PV1,0,1)PV_NAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}
record(bo, "ST99:Det:IOC_SADet4:SR_heartbeat") {
  field(DTYP, "Soft Channel")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(FLNK, "ST99:Det:IOC_SADet4:SR_i_am_alive")
}

record(bo, "ST99:Det:IOC_SADet4:SR_i_am_alive") {
  field(DTYP, "Soft Channel")
  field(DOL, "1")
  field(UDF, "0")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(OUT, "ST99:Det:IOC_SADet4:SR_deadIfZero.VAL PP")
}

record(bo, "ST99:Det:IOC_SADet4:SR_deadIfZero") {
  field(DTYP, "Soft Channel")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "300")
}

record(mbbo, "ST99:Det:IOC_SADet4:SR_rebootStatus") {
  field(DTYP, "Soft Channel")
  field(NOBT, "3")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(ZRST, "No Status")
  field(ONST, "Failure")
  field(TWST, "Warning")
  field(THST, "Seq Fail")
  field(FRST, "Ok")
  field(ONSV, "MAJOR")
  field(TWSV, "MINOR")
  field(THSV, "MAJOR")
}

record(mbbo, "ST99:Det:IOC_SADet4:SR_status") {
  field(DTYP, "Soft Channel")
  field(NOBT, "3")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(ZRST, "No Status")
  field(ONST, "Failure")
  field(TWST, "Warning")
  field(THST, "Seq Fail")
  field(FRST, "Ok")
  field(ONSV, "MAJOR")
  field(TWSV, "MINOR")
  field(THSV, "MAJOR")
}

record(stringout, "ST99:Det:IOC_SADet4:SR_recentlyStr") {
  field(DTYP, "Soft Channel")
  field(VAL, "Status unknown")
}

record(stringout, "ST99:Det:IOC_SADet4:SR_rebootStatusStr") {
  field(DTYP, "Soft Channel")
  field(VAL, "Status unknown")
}

record(stringout, "ST99:Det:IOC_SADet4:SR_rebootTime") {
  field(DTYP, "Soft Channel")
  field(VAL, "Not yet saved")
}

record(stringout, "ST99:Det:IOC_SADet4:SR_statusStr") {
  field(DTYP, "Soft Channel")
  field(VAL, "Status unknown")
}

record(stringout, "ST99:Det:IOC_SADet4:SR_0_Name") {
  field(VAL, "Not In Use")
  field(DTYP, "Soft Channel")
}

record(longout, "ST99:Det:IOC_SADet4:SR_0_State") {
  field(DTYP, "Soft Channel")
}

record(mbbo, "ST99:Det:IOC_SADet4:SR_0_Status") {
  field(DTYP, "Soft Channel")
  field(NOBT, "3")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(ZRST, "No Status")
  field(ONST, "Failure")
  field(TWST, "Warning")
  field(THST, "Seq Fail")
  field(FRST, "Ok")
  field(ONSV, "MAJOR")
  field(TWSV, "MINOR")
  field(THSV, "MAJOR")
}

record(stringout, "ST99:Det:IOC_SADet4:SR_0_StatusStr") {
  field(DTYP, "Soft Channel")
  field(VAL, "Status unknown")
}

record(stringout, "ST99:Det:IOC_SADet4:SR_0_Time") {
  field(DTYP, "Soft Channel")
  field(VAL, "Not yet saved")
}

record(stringout, "ST99:Det:IOC_SADet4:SR_1_Name") {
  field(VAL, "Not In Use")
  field(DTYP, "Soft Channel")
}

record(longout, "ST99:Det:IOC_SADet4:SR_1_State") {
  field(DTYP, "Soft Channel")
}

record(mbbo, "ST99:Det:IOC_SADet4:SR_1_Status") {
  field(DTYP, "Soft Channel")
  field(NOBT, "3")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(ZRST, "No Status")
  field(ONST, "Failure")
  field(TWST, "Warning")
  field(THST, "Seq Fail")
  field(FRST, "Ok")
  field(ONSV, "MAJOR")
  field(TWSV, "MINOR")
  field(THSV, "MAJOR")
}

record(stringout, "ST99:Det:IOC_SADet4:SR_1_StatusStr") {
  field(DTYP, "Soft Channel")
  field(VAL, "Status unknown")
}

record(stringout, "ST99:Det:IOC_SADet4:SR_1_Time") {
  field(DTYP, "Soft Channel")
  field(VAL, "Not yet saved")
}

record(stringout, "ST99:Det:IOC_SADet4:SR_2_Name") {
  field(VAL, "Not In Use")
  field(DTYP, "Soft Channel")
}

record(longout, "ST99:Det:IOC_SADet4:SR_2_State") {
  field(DTYP, "Soft Channel")
}

record(mbbo, "ST99:Det:IOC_SADet4:SR_2_Status") {
  field(DTYP, "Soft Channel")
  field(NOBT, "3")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(ZRST, "No Status")
  field(ONST, "Failure")
  field(TWST, "Warning")
  field(THST, "Seq Fail")
  field(FRST, "Ok")
  field(ONSV, "MAJOR")
  field(TWSV, "MINOR")
  field(THSV, "MAJOR")
}

record(stringout, "ST99:Det:IOC_SADet4:SR_2_StatusStr") {
  field(DTYP, "Soft Channel")
  field(VAL, "Status unknown")
}

record(stringout, "ST99:Det:IOC_SADet4:SR_2_Time") {
  field(DTYP, "Soft Channel")
  field(VAL, "Not yet saved")
}

record(stringout, "ST99:Det:IOC_SADet4:SR_3_Name") {
  field(VAL, "Not In Use")
  field(DTYP, "Soft Channel")
}

record(longout, "ST99:Det:IOC_SADet4:SR_3_State") {
  field(DTYP, "Soft Channel")
}

record(mbbo, "ST99:Det:IOC_SADet4:SR_3_Status") {
  field(DTYP, "Soft Channel")
  field(NOBT, "3")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(ZRST, "No Status")
  field(ONST, "Failure")
  field(TWST, "Warning")
  field(THST, "Seq Fail")
  field(FRST, "Ok")
  field(ONSV, "MAJOR")
  field(TWSV, "MINOR")
  field(THSV, "MAJOR")
}

record(stringout, "ST99:Det:IOC_SADet4:SR_3_StatusStr") {
  field(DTYP, "Soft Channel")
  field(VAL, "Status unknown")
}

record(stringout, "ST99:Det:IOC_SADet4:SR_3_Time") {
  field(DTYP, "Soft Channel")
  field(VAL, "Not yet saved")
}

record(stringout, "ST99:Det:IOC_SADet4:SR_4_Name") {
  field(VAL, "Not In Use")
  field(DTYP, "Soft Channel")
}

record(longout, "ST99:Det:IOC_SADet4:SR_4_State") {
  field(DTYP, "Soft Channel")
}

record(mbbo, "ST99:Det:IOC_SADet4:SR_4_Status") {
  field(DTYP, "Soft Channel")
  field(NOBT, "3")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(ZRST, "No Status")
  field(ONST, "Failure")
  field(TWST, "Warning")
  field(THST, "Seq Fail")
  field(FRST, "Ok")
  field(ONSV, "MAJOR")
  field(TWSV, "MINOR")
  field(THSV, "MAJOR")
}

record(stringout, "ST99:Det:IOC_SADet4:SR_4_StatusStr") {
  field(DTYP, "Soft Channel")
  field(VAL, "Status unknown")
}

record(stringout, "ST99:Det:IOC_SADet4:SR_4_Time") {
  field(DTYP, "Soft Channel")
  field(VAL, "Not yet saved")
}

record(stringout, "ST99:Det:IOC_SADet4:SR_5_Name") {
  field(VAL, "Not In Use")
  field(DTYP, "Soft Channel")
}

record(longout, "ST99:Det:IOC_SADet4:SR_5_State") {
  field(DTYP, "Soft Channel")
}

record(mbbo, "ST99:Det:IOC_SADet4:SR_5_Status") {
  field(DTYP, "Soft Channel")
  field(NOBT, "3")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(ZRST, "No Status")
  field(ONST, "Failure")
  field(TWST, "Warning")
  field(THST, "Seq Fail")
  field(FRST, "Ok")
  field(ONSV, "MAJOR")
  field(TWSV, "MINOR")
  field(THSV, "MAJOR")
}

record(stringout, "ST99:Det:IOC_SADet4:SR_5_StatusStr") {
  field(DTYP, "Soft Channel")
  field(VAL, "Status unknown")
}

record(stringout, "ST99:Det:IOC_SADet4:SR_5_Time") {
  field(DTYP, "Soft Channel")
  field(VAL, "Not yet saved")
}

record(stringout, "ST99:Det:IOC_SADet4:SR_6_Name") {
  field(VAL, "Not In Use")
  field(DTYP, "Soft Channel")
}

record(longout, "ST99:Det:IOC_SADet4:SR_6_State") {
  field(DTYP, "Soft Channel")
}

record(mbbo, "ST99:Det:IOC_SADet4:SR_6_Status") {
  field(DTYP, "Soft Channel")
  field(NOBT, "3")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(ZRST, "No Status")
  field(ONST, "Failure")
  field(TWST, "Warning")
  field(THST, "Seq Fail")
  field(FRST, "Ok")
  field(ONSV, "MAJOR")
  field(TWSV, "MINOR")
  field(THSV, "MAJOR")
}

record(stringout, "ST99:Det:IOC_SADet4:SR_6_StatusStr") {
  field(DTYP, "Soft Channel")
  field(VAL, "Status unknown")
}

record(stringout, "ST99:Det:IOC_SADet4:SR_6_Time") {
  field(DTYP, "Soft Channel")
  field(VAL, "Not yet saved")
}

record(stringout, "ST99:Det:IOC_SADet4:SR_7_Name") {
  field(VAL, "Not In Use")
  field(DTYP, "Soft Channel")
}

record(longout, "ST99:Det:IOC_SADet4:SR_7_State") {
  field(DTYP, "Soft Channel")
}

record(mbbo, "ST99:Det:IOC_SADet4:SR_7_Status") {
  field(DTYP, "Soft Channel")
  field(NOBT, "3")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(ZRST, "No Status")
  field(ONST, "Failure")
  field(TWST, "Warning")
  field(THST, "Seq Fail")
  field(FRST, "Ok")
  field(ONSV, "MAJOR")
  field(TWSV, "MINOR")
  field(THSV, "MAJOR")
}

record(stringout, "ST99:Det:IOC_SADet4:SR_7_StatusStr") {
  field(DTYP, "Soft Channel")
  field(VAL, "Status unknown")
}

record(stringout, "ST99:Det:IOC_SADet4:SR_7_Time") {
  field(DTYP, "Soft Channel")
  field(VAL, "Not yet saved")
}

record(longout, "ST99:Det:IOC_SADet4:SR_disableMaxSecs") {
  field(DTYP, "Soft Channel")
}
record(bo, "ST99:Det:IOC_SADet4:SR_disable") {
  field(DTYP, "Soft Channel")
  field(ZNAM, "Enable")
  field(ONAM, "Disable")
}
##########################################################
# SNS IOC Status Template
#
# This simplfies use of the ioc-stats module by providing
# a single template file that can be instantiated by
# an IOC, which makes use of several ioc-stats database
# template files. It also adds a summary alarm.
#
# Macros:
# IOCNAME - The IOC base PV name (eg. ST01:CS:IOC_MotSim)
#
# Matt Pearson
# Nov 2021
#
##########################################################

# Used by Channel Access Security to determine access to this IOC.
record(mbbo, "ST99:Det:IOC_SIDet4:ACCESS")
{
  field(DESC, "ST99:Det:IOC_SIDet4 Acc Mode")
  field(PINI, "YES")
  field(ZRST, "Running")
  field(ZRSV, "NO_ALARM")
  field(ONST, "Maintenance")
  field(ONSV, "MINOR")
  field(TWST, "Test")
  field(TWSV, "MINOR")
  field(THST, "OFFLINE")
  field(THSV, "MAJOR")
  info(autosaveFields, "VAL")
}
record(stringin, "ST99:Det:IOC_SIDet4:STARTTOD")
{
    field(DESC, "Time and date of startup")
    field(DTYP, "Soft Timestamp")
    field(PINI, "YES")
    field(INP, "@@%Y/%m/%d %H:%M:%S")
}
record(stringin, "ST99:Det:IOC_SIDet4:TOD")
{
    field(DESC, "Current time and date")
    field(DTYP, "Soft Timestamp")
    field(SCAN, "1 second")
    field(INP, "@@%Y/%m/%d %H:%M:%S")
}
record(calcout, "ST99:Det:IOC_SIDet4:HEARTBEAT")
{
    field(DESC, "1 Hz counter since startup")
    field(CALC, "(A<2147483647)?A+1:1")
    field(SCAN, "1 second")
    field(INPA, "ST99:Det:IOC_SIDet4:HEARTBEAT")
}
# if autosave is working, START_CNT creates a running count of 
# number of times the IOC was started.
record(calcout, "ST99:Det:IOC_SIDet4:START_CNT")
{
    field(DESC, "Increments at startup")
    field(CALC, "A+1")
    field(PINI, "YES")
    field(INPA, "ST99:Det:IOC_SIDet4:START_CNT")
    info(autosaveFields_pass0, "VAL")
}
#
# Using an existing internal set of subroutines, this
# PV updates the Access Security mechanism dynamically.
# The .acf file is re-read.
#
record( sub, "ST99:Det:IOC_SIDet4:READACF")
{
    field( DESC, "ST99:Det:IOC_SIDet4 ACF Update")
    field( INAM, "asSubInit")
    field( SNAM, "asSubProcess")
    field( BRSV, "INVALID")
}
record(sub, "ST99:Det:IOC_SIDet4:SYSRESET")
{
    alias("ST99:Det:IOC_SIDet4:SysReset")
    field(DESC, "IOC Restart" )
    field(SNAM, "rebootProc")
    field(BRSV,"INVALID")
    field(L,"1")
}

record(ai, "ST99:Det:IOC_SIDet4:CA_CLNT_CNT") {
  field(DESC, "Number of CA Clients")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@ca_clients")
  field(HOPR, "200")
  field(HIHI, "175")
  field(HIGH, "100")
  field(HHSV, "MAJOR")
  field(HSV, "MINOR")
  info(autosaveFields_pass0, "HOPR LOPR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

record(ai, "ST99:Det:IOC_SIDet4:CA_CONN_CNT") {
  field(DESC, "Number of CA Connections")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@ca_connections")
  field(HOPR, "5000")
  field(HIHI, "4500")
  field(HIGH, "4000")
  field(HHSV, "MAJOR")
  field(HSV, "MINOR")
  info(autosaveFields_pass0, "HOPR LOPR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

record(ai, "ST99:Det:IOC_SIDet4:RECORD_CNT") {
  field(DESC, "Number of Records")
  field(PINI, "YES")
  field(DTYP, "IOC stats")
  field(INP, "@records")
}

record(ai, "ST99:Det:IOC_SIDet4:FD_MAX") {
  field(DESC, "Max File Descriptors")
  field(PINI, "YES")
  field(DTYP, "IOC stats")
  field(INP, "@maxfd")
}

record(ai, "ST99:Det:IOC_SIDet4:FD_CNT") {
  field(DESC, "Allocated File Descriptors")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(FLNK, "ST99:Det:IOC_SIDet4:FD_FREE  PP MS")
  field(INP, "@fd")
}

record(calc, "ST99:Det:IOC_SIDet4:FD_FREE") {
  field(DESC, "Available FDs")
  field(CALC, "B>0?B-A:C")
  field(INPA, "ST99:Det:IOC_SIDet4:FD_CNT  NPP MS")
  field(INPB, "ST99:Det:IOC_SIDet4:FD_MAX  NPP MS")
  field(INPC, "1000")
  field(HOPR, "150")
  field(LOLO, "5")
  field(LOW, "20")
  field(LLSV, "MAJOR")
  field(LSV, "MINOR")
  info(autosaveFields_pass0, "HOPR LOPR LOW LOLO LSV LLSV")
}

record(ai, "ST99:Det:IOC_SIDet4:SYS_CPU_LOAD") {
  field(DESC, "System CPU Load")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@sys_cpuload")
  field(EGU, "%")
  field(PREC, "1")
  field(HOPR, "100")
  field(HIHI, "80")
  field(HIGH, "70")
  field(HHSV, "MAJOR")
  field(HSV, "MINOR")
  info(autosaveFields_pass0, "HOPR LOPR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

record(ai, "ST99:Det:IOC_SIDet4:IOC_CPU_LOAD") {
  alias("ST99:Det:IOC_SIDet4:LOAD")
  field(DESC, "IOC CPU Load")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@ioc_cpuload")
  field(EGU, "%")
  field(PREC, "1")
  field(HOPR, "100")
  field(HIHI, "80")
  field(HIGH, "70")
  field(HHSV, "MAJOR")
  field(HSV, "MINOR")
  info(autosaveFields_pass0, "HOPR LOPR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

record(ai, "ST99:Det:IOC_SIDet4:CPU_CNT") {
  field(DESC, "Number of CPUs")
  field(DTYP, "IOC stats")
  field(INP, "@no_of_cpus")
  field(PINI, "YES")
}

record(ai, "ST99:Det:IOC_SIDet4:SUSP_TASK_CNT") {
  field(DESC, "Number Suspended Tasks")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@suspended_tasks")
  field(HIHI, "1")
  field(HHSV, "MAJOR")
  info(autosaveFields_pass0, "HOPR LOPR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

record(ai, "ST99:Det:IOC_SIDet4:MEM_USED") {
  field(DESC, "Allocated Memory")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@allocated_bytes")
  field(EGU, "byte")
}

record(ai, "ST99:Det:IOC_SIDet4:MEM_FREE") {
  field(DESC, "Free Memory")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@free_bytes")
  field(EGU, "byte")
  field(LLSV, "MAJOR")
  field(LSV, "MINOR")
  info(autosaveFields_pass0, "HOPR LOPR LOW LOLO LSV LLSV")
}

record(ai, "ST99:Det:IOC_SIDet4:MEM_MAX") {
  field(DESC, "Maximum Memory")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@total_bytes")
  field(EGU, "byte")
}

record(ao, "ST99:Det:IOC_SIDet4:CA_UPD_TIME") {
  field(DESC, "CA Check Update Period")
  field(DTYP, "IOC stats")
  field(OUT, "@ca_scan_rate")
  field(EGU, "sec")
  field(DRVH, "60")
  field(DRVL, "1")
  field(HOPR, "60")
  field(VAL, "15")
  field(PINI, "YES")
}

record(ao, "ST99:Det:IOC_SIDet4:FD_UPD_TIME") {
  field(DESC, "FD Check Update Period")
  field(DTYP, "IOC stats")
  field(OUT, "@fd_scan_rate")
  field(EGU, "sec")
  field(DRVH, "60")
  field(DRVL, "1")
  field(HOPR, "60")
  field(VAL, "20")
  field(PINI, "YES")
}

record(ao, "ST99:Det:IOC_SIDet4:LOAD_UPD_TIME") {
  field(DESC, "CPU Check Update Period")
  field(DTYP, "IOC stats")
  field(OUT, "@cpu_scan_rate")
  field(EGU, "sec")
  field(DRVH, "60")
  field(DRVL, "1")
  field(HOPR, "60")
  field(VAL, "10")
  field(PINI, "YES")
}

record(ao, "ST99:Det:IOC_SIDet4:MEM_UPD_TIME") {
  field(DESC, "Memory Check Update Period")
  field(DTYP, "IOC stats")
  field(OUT, "@memory_scan_rate")
  field(EGU, "sec")
  field(DRVH, "60")
  field(DRVL, "1")
  field(HOPR, "60")
  field(VAL, "10")
  field(PINI, "YES")
}

record(stringin, "ST99:Det:IOC_SIDet4:ST_SCRIPT1") {
  field(DESC, "Startup Script Part1")
  field(DTYP, "IOC stats")
  field(INP, "@startup_script_1")
  field(PINI, "YES")
}

record(stringin, "ST99:Det:IOC_SIDet4:ST_SCRIPT2") {
  field(DESC, "Startup Script Part2")
  field(DTYP, "IOC stats")
  field(INP, "@startup_script_2")
  field(PINI, "YES")
}

record(waveform, "ST99:Det:IOC_SIDet4:ST_SCRIPT") {
  field(DESC, "Startup Script")
  field(DTYP, "IOC stats")
  field(INP, "@startup_script")
  field(NELM, "120")
  field(FTVL, "CHAR")
  field(PINI, "YES")
}

record(stringin, "ST99:Det:IOC_SIDet4:KERNEL_VERS") {
  field(DESC, "Kernel Version")
  field(DTYP, "IOC stats")
  field(INP, "@kernel_ver")
  field(PINI, "YES")
}

record(stringin, "ST99:Det:IOC_SIDet4:EPICS_VERS") {
  field(DESC, "EPICS Version")
  field(DTYP, "IOC stats")
  field(INP, "@epics_ver")
  field(PINI, "YES")
}

record(waveform, "ST99:Det:IOC_SIDet4:EPICS_VERSION") {
  field(DESC, "EPICS Version")
  field(DTYP, "IOC stats")
  field(INP, "@epics_ver")
  field(NELM, "120")
  field(FTVL, "CHAR")
  field(PINI, "YES")
}

record(stringin, "ST99:Det:IOC_SIDet4:HOSTNAME") {
  field(DESC, "Host Name")
  field(DTYP, "IOC stats")
  field(INP, "@hostname")
  field(PINI, "YES")
}

record(stringin, "ST99:Det:IOC_SIDet4:APP_DIR1") {
  field(DESC, "Application Directory Part 1")
  field(DTYP, "IOC stats")
  field(INP, "@pwd1")
  field(PINI, "YES")
}

record(stringin, "ST99:Det:IOC_SIDet4:APP_DIR2") {
  field(DESC, "Application Directory Part 2")
  field(DTYP, "IOC stats")
  field(INP, "@pwd2")
  field(PINI, "YES")
}

record(waveform, "ST99:Det:IOC_SIDet4:APP_DIR") {
  field(DESC, "Application Directory")
  field(DTYP, "IOC stats")
  field(INP, "@pwd")
  field(NELM, "160")
  field(FTVL, "CHAR")
  field(PINI, "YES")
}

record(stringin, "ST99:Det:IOC_SIDet4:UPTIME") {
  field(DESC, "Elapsed Time since Start")
  field(SCAN, "1 second")
  field(DTYP, "IOC stats")
  field(INP, "@up_time")
  field(PINI, "YES")
}

record(stringin, "ST99:Det:IOC_SIDet4:ENGINEER") {
  field(DESC, "Engineer")
  field(DTYP, "IOC stats")
  field(INP, "@engineer")
  field(PINI, "YES")
}

record(stringin, "ST99:Det:IOC_SIDet4:LOCATION") {
  field(DESC, "Location")
  field(DTYP, "IOC stats")
  field(INP, "@location")
  field(PINI, "YES")
}

record(ai, "ST99:Det:IOC_SIDet4:PROCESS_ID") {
  field(DESC, "Process ID")
  field(PINI, "YES")
  field(DTYP, "IOC stats")
  field(INP, "@proc_id")
}

record(ai, "ST99:Det:IOC_SIDet4:PARENT_ID") {
  field(DESC, "Parent Process ID")
  field(PINI, "YES")
  field(DTYP, "IOC stats")
  field(INP, "@parent_proc_id")
}

record(ai, "ST99:Det:IOC_SIDet4:SCANONCE_Q_SIZE") {
  field(DESC, "max # entries in IOC scanOnce queue")
  field(DTYP, "IOC stats")
  field(INP,  "@scanOnceQueueSize")
  field(PINI, "YES")
}
record(ai, "ST99:Det:IOC_SIDet4:CB_Q_SIZE") {
  field(DESC, "max # entries in IOC callback queues")
  field(DTYP, "IOC stats")
  field(INP,  "@cbQueueSize")
  field(PINI, "YES")
}

record(ai, "ST99:Det:IOC_SIDet4:SCANONCE_Q_HIGH") {
  field(DESC, "max # of elmts in IOC's scanOnce queue")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP,  "@scanOnceQueueHiWtrMrk")
  field(PINI, "YES")
  field(FLNK, "ST99:Det:IOC_SIDet4:SCANONCE_Q_HIGHPER")
}

record(calc, "ST99:Det:IOC_SIDet4:SCANONCE_Q_HIGHPER") {
  field(DESC, "Max. usage of IOC's scanOnce queue")
  field(INPA, "ST99:Det:IOC_SIDet4:SCANONCE_Q_HIGH NPP MS")
  field(INPB, "ST99:Det:IOC_SIDet4:SCANONCE_Q_SIZE NPP MS")
  field(CALC, "100*A/B")
  field(LOPR, "0")
  field(HOPR, "100")
  field(EGU,  "%")
}

record(ai, "ST99:Det:IOC_SIDet4:SCANONCE_Q_USED") {
  field(DESC, "# of entries in IOC's scanOnce queue")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP,  "@scanOnceQueueUsed")
  field(PINI, "YES")
  field(FLNK, "ST99:Det:IOC_SIDet4:SCANONCE_Q_USEDPER")
}

record(calc, "ST99:Det:IOC_SIDet4:SCANONCE_Q_USEDPER") {
  field(DESC, "Percentage of IOC's scanOnce queue used")
  field(INPA, "ST99:Det:IOC_SIDet4:SCANONCE_Q_USED NPP MS")
  field(INPB, "ST99:Det:IOC_SIDet4:SCANONCE_Q_SIZE NPP MS")
  field(CALC, "100*A/B")
  field(LOPR, "0")
  field(HOPR, "100")
  field(EGU,  "%")
}

record(ai, "ST99:Det:IOC_SIDet4:SCANONCE_Q_OVERRUNS") {
  field(DESC, "# of overruns of IOC's scanOnce queue")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP,  "@scanOnceQueueOverruns")
  field(PINI, "YES")
}

record(ai, "ST99:Det:IOC_SIDet4:CBLOW_Q_HIGH") {
  field(DESC, "max # of elmts in IOC's cbLow queue")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP,  "@cbLowQueueHiWtrMrk")
  field(PINI, "YES")
  field(FLNK, "ST99:Det:IOC_SIDet4:CBLOW_Q_HIGHPER")
}

record(calc, "ST99:Det:IOC_SIDet4:CBLOW_Q_HIGHPER") {
  field(DESC, "Max. usage of IOC's cbLow queue")
  field(INPA, "ST99:Det:IOC_SIDet4:CBLOW_Q_HIGH NPP MS")
  field(INPB, "ST99:Det:IOC_SIDet4:CB_Q_SIZE NPP MS")
  field(CALC, "100*A/B")
  field(LOPR, "0")
  field(HOPR, "100")
  field(EGU,  "%")
}

record(ai, "ST99:Det:IOC_SIDet4:CBLOW_Q_USED") {
  field(DESC, "# of entries in IOC's cbLow queue")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP,  "@cbLowQueueUsed")
  field(PINI, "YES")
  field(FLNK, "ST99:Det:IOC_SIDet4:CBLOW_Q_USEDPER")
}

record(calc, "ST99:Det:IOC_SIDet4:CBLOW_Q_USEDPER") {
  field(DESC, "Percentage of IOC's cbLow queue used")
  field(INPA, "ST99:Det:IOC_SIDet4:CBLOW_Q_USED NPP MS")
  field(INPB, "ST99:Det:IOC_SIDet4:CB_Q_SIZE NPP MS")
  field(CALC, "100*A/B")
  field(LOPR, "0")
  field(HOPR, "100")
  field(EGU,  "%")
}

record(ai, "ST99:Det:IOC_SIDet4:CBLOW_Q_OVERRUNS") {
  field(DESC, "# of overruns of IOC's cbLow queue")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP,  "@cbLowQueueOverruns")
  field(PINI, "YES")
}

record(ai, "ST99:Det:IOC_SIDet4:CBMEDIUM_Q_HIGH") {
  field(DESC, "max # of elmts in IOC's cbMedium queue")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP,  "@cbMediumQueueHiWtrMrk")
  field(PINI, "YES")
  field(FLNK, "ST99:Det:IOC_SIDet4:CBMEDIUM_Q_HIGHPER")
}

record(calc, "ST99:Det:IOC_SIDet4:CBMEDIUM_Q_HIGHPER") {
  field(DESC, "Max. usage of IOC's cbMedium queue")
  field(INPA, "ST99:Det:IOC_SIDet4:CBMEDIUM_Q_HIGH NPP MS")
  field(INPB, "ST99:Det:IOC_SIDet4:CB_Q_SIZE NPP MS")
  field(CALC, "100*A/B")
  field(LOPR, "0")
  field(HOPR, "100")
  field(EGU,  "%")
}

record(ai, "ST99:Det:IOC_SIDet4:CBMEDIUM_Q_USED") {
  field(DESC, "# of entries in IOC's cbMedium queue")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP,  "@cbMediumQueueUsed")
  field(PINI, "YES")
  field(FLNK, "ST99:Det:IOC_SIDet4:CBMEDIUM_Q_USEDPER")
}

record(calc, "ST99:Det:IOC_SIDet4:CBMEDIUM_Q_USEDPER") {
  field(DESC, "Percentage of IOC's cbMedium queue used")
  field(INPA, "ST99:Det:IOC_SIDet4:CBMEDIUM_Q_USED NPP MS")
  field(INPB, "ST99:Det:IOC_SIDet4:CB_Q_SIZE NPP MS")
  field(CALC, "100*A/B")
  field(LOPR, "0")
  field(HOPR, "100")
  field(EGU,  "%")
}

record(ai, "ST99:Det:IOC_SIDet4:CBMEDIUM_Q_OVERRUNS") {
  field(DESC, "# of overruns of IOC's cbMedium queue")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP,  "@cbMediumQueueOverruns")
  field(PINI, "YES")
}

record(ai, "ST99:Det:IOC_SIDet4:CBHIGH_Q_HIGH") {
  field(DESC, "max # of elmts in IOC's cbHigh queue")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP,  "@cbHighQueueHiWtrMrk")
  field(PINI, "YES")
  field(FLNK, "ST99:Det:IOC_SIDet4:CBHIGH_Q_HIGHPER")
}

record(calc, "ST99:Det:IOC_SIDet4:CBHIGH_Q_HIGHPER") {
  field(DESC, "Max. usage of IOC's cbHigh queue")
  field(INPA, "ST99:Det:IOC_SIDet4:CBHIGH_Q_HIGH NPP MS")
  field(INPB, "ST99:Det:IOC_SIDet4:CB_Q_SIZE NPP MS")
  field(CALC, "100*A/B")
  field(LOPR, "0")
  field(HOPR, "100")
  field(EGU,  "%")
}

record(ai, "ST99:Det:IOC_SIDet4:CBHIGH_Q_USED") {
  field(DESC, "# of entries in IOC's cbHigh queue")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP,  "@cbHighQueueUsed")
  field(PINI, "YES")
  field(FLNK, "ST99:Det:IOC_SIDet4:CBHIGH_Q_USEDPER")
}

record(calc, "ST99:Det:IOC_SIDet4:CBHIGH_Q_USEDPER") {
  field(DESC, "Percentage of IOC's cbHigh queue used")
  field(INPA, "ST99:Det:IOC_SIDet4:CBHIGH_Q_USED NPP MS")
  field(INPB, "ST99:Det:IOC_SIDet4:CB_Q_SIZE NPP MS")
  field(CALC, "100*A/B")
  field(LOPR, "0")
  field(HOPR, "100")
  field(EGU,  "%")
}

record(ai, "ST99:Det:IOC_SIDet4:CBHIGH_Q_OVERRUNS") {
  field(DESC, "# of overruns of IOC's cbHigh queue")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP,  "@cbHighQueueOverruns")
  field(PINI, "YES")
}

record(ai, "ST99:Det:IOC_SIDet4:GTIM_TIME") {
  field(DESC, "Gen Time Secs since 1990")
  field(SCAN, "1 second")
  field(DTYP, "General Time")
  field(PREC, "3")
  field(INP,  "@TIME")
  field(EGU,  "sec")
}

record(bo, "ST99:Det:IOC_SIDet4:GTIM_RESET") {
  field(DESC, "Gen Time Error Reset")
  field(DTYP, "General Time")
  field(OUT,  "@RSTERRCNT")
  field(ZNAM, "Reset")
  field(ONAM, "Reset")
}

record(longin, "ST99:Det:IOC_SIDet4:GTIM_ERR_CNT") {
  field(DESC, "Gen Time Error Count")
  field(DTYP, "General Time")
  field(INP,  "@GETERRCNT")
  field(SCAN, "1 second")
  field(HIHI, "1")
  field(HHSV, "MAJOR")
}

record(stringin, "ST99:Det:IOC_SIDet4:GTIM_CUR_SRC") {
  field(DESC, "Gen Time Current Provider")
  field(DTYP, "General Time")
  field(INP,  "@BESTTCP")
  field(SCAN, "1 second")
}

record(stringin, "ST99:Det:IOC_SIDet4:GTIM_EVT_SRC") {
  field(DESC, "Gen Time Event Provider")
  field(DTYP, "General Time")
  field(INP,  "@BESTTEP")
  field(SCAN, "1 second")
}

record(stringin, "ST99:Det:IOC_SIDet4:GTIM_HI_SRC") {
  field(DESC, "Gen Time Highest Provider")
  field(DTYP, "General Time")
  field(INP,  "@TOPTCP")
  field(SCAN, "1 second")
}

record(stringin, "ST99:Det:IOC_SIDet4:CA_ADDR_LIST") {
  field(DESC, "EPICS_CA_ADDR_LIST")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_CA_ADDR_LIST")
  field(PINI, "YES")
}

record(stringin, "ST99:Det:IOC_SIDet4:CAS_INTF_ADDR") {
  field(DESC, "EPICS_CAS_INTF_ADDR_LIST")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_CAS_INTF_ADDR_LIST")
  field(PINI, "YES")
}

record(stringin, "ST99:Det:IOC_SIDet4:CA_CONN_TIME") {
  field(DESC, "EPICS_CA_CONN_TMO")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_CA_CONN_TMO")
  field(PINI, "YES")
}

record(stringin, "ST99:Det:IOC_SIDet4:CA_AUTO_ADDR") {
  field(DESC, "EPICS_CA_AUTO_ADDR_LIST")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_CA_AUTO_ADDR_LIST")
  field(PINI, "YES")
}

record(stringin, "ST99:Det:IOC_SIDet4:CA_RPTR_PORT") {
  field(DESC, "EPICS_CA_REPEATER_PORT")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_CA_REPEATER_PORT")
  field(PINI, "YES")
}

record(stringin, "ST99:Det:IOC_SIDet4:CA_SRVR_PORT") {
  field(DESC, "EPICS_CA_SERVER_PORT")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_CA_SERVER_PORT")
  field(PINI, "YES")
}

record(stringin, "ST99:Det:IOC_SIDet4:CA_MAX_ARRAY") {
  field(DESC, "EPICS_CA_MAX_ARRAY_BYTES")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_CA_MAX_ARRAY_BYTES")
  field(PINI, "YES")
}

record(stringin, "ST99:Det:IOC_SIDet4:CA_SRCH_TIME") {
  field(DESC, "EPICS_CA_MAX_SEARCH_PERIOD")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_CA_MAX_SEARCH_PERIOD")
  field(PINI, "YES")
}

record(stringin, "ST99:Det:IOC_SIDet4:CA_BEAC_TIME") {
  field(DESC, "EPICS_CA_BEACON_PERIOD")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_CA_BEACON_PERIOD")
  field(PINI, "YES")
}

record(stringin, "ST99:Det:IOC_SIDet4:TIMEZONE") {
  field(DESC, "EPICS_TZ")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_TZ")
  field(PINI, "YES")
}

record(stringin, "ST99:Det:IOC_SIDet4:TS_NTP_INET") {
  field(DESC, "EPICS_TS_NTP_INET")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_TS_NTP_INET")
  field(PINI, "YES")
}

record(stringin, "ST99:Det:IOC_SIDet4:IOC_LOG_PORT") {
  field(DESC, "EPICS_IOC_LOG_PORT")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_IOC_LOG_PORT")
  field(PINI, "YES")
}

record(stringin, "ST99:Det:IOC_SIDet4:IOC_LOG_INET") {
  field(DESC, "EPICS_IOC_LOG_INET")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_IOC_LOG_INET")
  field(PINI, "YES")
}

record(bo, "ST99:Det:IOC_SIDet4:HZ_01_MODE") {
	field(DESC, "HZ_01 Mode")
	field(DOL, "1")
	field(PINI, "YES")
	field(ZNAM, "Relative")
	field(ONAM, "Absolute")
}
record(sub, "ST99:Det:IOC_SIDet4:HZ_01_UPD_TIME") {
	field(DESC, "HZ_01 Update Time")
	field(SCAN, "10 second")
	field(EGU, "second")
	field(PREC, "5")
	field(MDEL, "0.00001")
	field(HYST, "0.00002")
	field(INAM, "scanMonInit")
	field(SNAM, "scanMon")
	field(HHSV, "MAJOR")
	field(HSV, "MINOR")
	field(LSV, "MINOR")
	field(LLSV, "MAJOR")
	field(BRSV, "INVALID")
	field(INPA, "ST99:Det:IOC_SIDet4:HZ_01_MODE")
	field(B,    "1.0")
	field(C,    "5.0")
}

record(bo, "ST99:Det:IOC_SIDet4:HZ_02_MODE") {
	field(DESC, "HZ_02 Mode")
	field(DOL, "1")
	field(PINI, "YES")
	field(ZNAM, "Relative")
	field(ONAM, "Absolute")
}
record(sub, "ST99:Det:IOC_SIDet4:HZ_02_UPD_TIME") {
	field(DESC, "HZ_02 Update Time")
	field(SCAN, "5 second")
	field(EGU, "second")
	field(PREC, "5")
	field(MDEL, "0.00001")
	field(HYST, "0.00002")
	field(INAM, "scanMonInit")
	field(SNAM, "scanMon")
	field(HHSV, "MAJOR")
	field(HSV, "MINOR")
	field(LSV, "MINOR")
	field(LLSV, "MAJOR")
	field(BRSV, "INVALID")
	field(INPA, "ST99:Det:IOC_SIDet4:HZ_02_MODE")
	field(B,    "1.0")
	field(C,    "5.0")
}

record(bo, "ST99:Det:IOC_SIDet4:HZ_05_MODE") {
	field(DESC, "HZ_05 Mode")
	field(DOL, "1")
	field(PINI, "YES")
	field(ZNAM, "Relative")
	field(ONAM, "Absolute")
}
record(sub, "ST99:Det:IOC_SIDet4:HZ_05_UPD_TIME") {
	field(DESC, "HZ_05 Update Time")
	field(SCAN, "2 second")
	field(EGU, "second")
	field(PREC, "5")
	field(MDEL, "0.00001")
	field(HYST, "0.00002")
	field(INAM, "scanMonInit")
	field(SNAM, "scanMon")
	field(HHSV, "MAJOR")
	field(HSV, "MINOR")
	field(LSV, "MINOR")
	field(LLSV, "MAJOR")
	field(BRSV, "INVALID")
	field(INPA, "ST99:Det:IOC_SIDet4:HZ_05_MODE")
	field(B,    "1.0")
	field(C,    "5.0")
}

record(bo, "ST99:Det:IOC_SIDet4:HZ_1_MODE") {
	field(DESC, "HZ_1 Mode")
	field(DOL, "1")
	field(PINI, "YES")
	field(ZNAM, "Relative")
	field(ONAM, "Absolute")
}
record(sub, "ST99:Det:IOC_SIDet4:HZ_1_UPD_TIME") {
	field(DESC, "HZ_1 Update Time")
	field(SCAN, "1 second")
	field(EGU, "second")
	field(PREC, "5")
	field(MDEL, "0.00001")
	field(HYST, "0.00002")
	field(INAM, "scanMonInit")
	field(SNAM, "scanMon")
	field(HHSV, "MAJOR")
	field(HSV, "MINOR")
	field(LSV, "MINOR")
	field(LLSV, "MAJOR")
	field(BRSV, "INVALID")
	field(INPA, "ST99:Det:IOC_SIDet4:HZ_1_MODE")
	field(B,    "1.0")
	field(C,    "5.0")
}

record(bo, "ST99:Det:IOC_SIDet4:HZ_2_MODE") {
	field(DESC, "HZ_2 Mode")
	field(DOL, "1")
	field(PINI, "YES")
	field(ZNAM, "Relative")
	field(ONAM, "Absolute")
}
record(sub, "ST99:Det:IOC_SIDet4:HZ_2_UPD_TIME") {
	field(DESC, "HZ_2 Update Time")
	field(SCAN, ".5 second")
	field(EGU, "second")
	field(PREC, "5")
	field(MDEL, "0.00001")
	field(HYST, "0.00002")
	field(INAM, "scanMonInit")
	field(SNAM, "scanMon")
	field(HHSV, "MAJOR")
	field(HSV, "MINOR")
	field(LSV, "MINOR")
	field(LLSV, "MAJOR")
	field(BRSV, "INVALID")
	field(INPA, "ST99:Det:IOC_SIDet4:HZ_2_MODE")
	field(B,    "1.0")
	field(C,    "5.0")
}

record(bo, "ST99:Det:IOC_SIDet4:HZ_5_MODE") {
	field(DESC, "HZ_5 Mode")
	field(DOL, "1")
	field(PINI, "YES")
	field(ZNAM, "Relative")
	field(ONAM, "Absolute")
}
record(sub, "ST99:Det:IOC_SIDet4:HZ_5_UPD_TIME") {
	field(DESC, "HZ_5 Update Time")
	field(SCAN, ".2 second")
	field(EGU, "second")
	field(PREC, "5")
	field(MDEL, "0.00001")
	field(HYST, "0.00002")
	field(INAM, "scanMonInit")
	field(SNAM, "scanMon")
	field(HHSV, "MAJOR")
	field(HSV, "MINOR")
	field(LSV, "MINOR")
	field(LLSV, "MAJOR")
	field(BRSV, "INVALID")
	field(INPA, "ST99:Det:IOC_SIDet4:HZ_5_MODE")
	field(B,    "1.0")
	field(C,    "5.0")
}

record(bo, "ST99:Det:IOC_SIDet4:HZ_10_MODE") {
	field(DESC, "HZ_10 Mode")
	field(DOL, "1")
	field(PINI, "YES")
	field(ZNAM, "Relative")
	field(ONAM, "Absolute")
}
record(sub, "ST99:Det:IOC_SIDet4:HZ_10_UPD_TIME") {
	field(DESC, "HZ_10 Update Time")
	field(SCAN, ".1 second")
	field(EGU, "second")
	field(PREC, "5")
	field(MDEL, "0.00001")
	field(HYST, "0.00002")
	field(INAM, "scanMonInit")
	field(SNAM, "scanMon")
	field(HHSV, "MAJOR")
	field(HSV, "MINOR")
	field(LSV, "MINOR")
	field(LLSV, "MAJOR")
	field(BRSV, "INVALID")
	field(INPA, "ST99:Det:IOC_SIDet4:HZ_10_MODE")
	field(B,    "1.0")
	field(C,    "5.0")
}


record(calc, "ST99:Det:IOC_SIDet4:SCANMON_SEVR") {
    field(DESC, "ScanMon Max Severity")
    field(SCAN, "1 second")
    field(CALC, "0")
    field(INPA, "ST99:Det:IOC_SIDet4:HZ_01_UPD_TIME.SEVR MS")
    field(INPB, "ST99:Det:IOC_SIDet4:HZ_02_UPD_TIME.SEVR MS")
    field(INPC, "ST99:Det:IOC_SIDet4:HZ_05_UPD_TIME.SEVR MS")
    field(INPD, "ST99:Det:IOC_SIDet4:HZ_1_UPD_TIME.SEVR MS")
    field(INPE, "ST99:Det:IOC_SIDet4:HZ_2_UPD_TIME.SEVR MS")
    field(INPF, "ST99:Det:IOC_SIDet4:HZ_5_UPD_TIME.SEVR MS")
    field(INPG, "ST99:Det:IOC_SIDet4:HZ_10_UPD_TIME.SEVR MS")
}


##########################################################
# Extra SNS records

# ///
# /// Add a new record to calculate
# /// percent memory and file descriptors used.
# /// Then forward link to some new status records below.
# ///
record(calc, "ST99:Det:IOC_SIDet4:MEM_USED_PER") {
  field(SCAN, "1 second")
  field(INPA, "ST99:Det:IOC_SIDet4:MEM_USED")
  field(INPB, "ST99:Det:IOC_SIDet4:MEM_MAX")
  field(CALC, "(A/B)*100")
  field(EGU, "%")
  field(PREC, "2")
  field(HIGH, "50")
  field(HIHI, "80")
  field(HSV, "MINOR")
  field(HHSV, "MAJOR")
  field(FLNK, "ST99:Det:IOC_SIDet4:FD_CNT_PER")
  info(autosaveFields_pass0, "HIGH HIHI")
}
record(calc, "ST99:Det:IOC_SIDet4:FD_CNT_PER") {
  field(INPA, "ST99:Det:IOC_SIDet4:FD_CNT")
  field(INPB, "ST99:Det:IOC_SIDet4:FD_MAX")
  field(CALC, "(A/B)*100")
  field(EGU, "%")
  field(PREC, "1")
  field(HIGH, "80")
  field(HIHI, "90")
  field(HSV, "MINOR")
  field(HHSV, "MAJOR")
  field(FLNK, "ST99:Det:IOC_SIDet4:Q_SEVR")
  info(autosaveFields_pass0, "HIGH HIHI")
}

# ///
# /// Add limits on the queue used % records
# ///
record(calc, "ST99:Det:IOC_SIDet4:SCANONCE_Q_USEDPER") {
  field(PREC, "1")
  field(HIGH, "50")
  field(HIHI, "80")
  field(HSV, "MINOR")
  field(HHSV, "MAJOR")
  info(autosaveFields_pass0, "HIGH HIHI")
}
record(calc, "ST99:Det:IOC_SIDet4:CBLOW_Q_USEDPER") {
  field(PREC, "1")
  field(HIGH, "50")
  field(HIHI, "80")
  field(HSV, "MINOR")
  field(HHSV, "MAJOR")
  info(autosaveFields_pass0, "HIGH HIHI")
}
record(calc, "ST99:Det:IOC_SIDet4:CBMEDIUM_Q_USEDPER") {
  field(PREC, "1")
  field(HIGH, "50")
  field(HIHI, "80")
  field(HSV, "MINOR")
  field(HHSV, "MAJOR")
  info(autosaveFields_pass0, "HIGH HIHI")
}
record(calc, "ST99:Det:IOC_SIDet4:CBHIGH_Q_USEDPER") {
  field(PREC, "1")
  field(HIGH, "50")
  field(HIHI, "80")
  field(HSV, "MINOR")
  field(HHSV, "MAJOR")
  info(autosaveFields_pass0, "HIGH HIHI")
}

# ///
# /// Add limits on the queue high % records
# ///
record(calc, "ST99:Det:IOC_SIDet4:SCANONCE_Q_HIGHPER") {
  field(PREC, "1")
  field(HIGH, "50")
  field(HIHI, "80")
  field(HSV, "MINOR")
  field(HHSV, "MAJOR")
  info(autosaveFields_pass0, "HIGH HIHI")
}
record(calc, "ST99:Det:IOC_SIDet4:CBLOW_Q_HIGHPER") {
  field(PREC, "1")
  field(HIGH, "50")
  field(HIHI, "80")
  field(HSV, "MINOR")
  field(HHSV, "MAJOR")
  info(autosaveFields_pass0, "HIGH HIHI")
}
record(calc, "ST99:Det:IOC_SIDet4:CBMEDIUM_Q_HIGHPER") {
  field(PREC, "1")
  field(HIGH, "50")
  field(HIHI, "80")
  field(HSV, "MINOR")
  field(HHSV, "MAJOR")
  info(autosaveFields_pass0, "HIGH HIHI")
}
record(calc, "ST99:Det:IOC_SIDet4:CBHIGH_Q_HIGHPER") {
  field(PREC, "1")
  field(HIGH, "50")
  field(HIHI, "80")
  field(HSV, "MINOR")
  field(HHSV, "MAJOR")
  info(autosaveFields_pass0, "HIGH HIHI")
}

# ///
# /// Add limits on the queue overrun records
# ///
record(ai, "ST99:Det:IOC_SIDet4:SCANONCE_Q_OVERRUNS") {
  field(HIGH, "1")
  field(HIHI, "1")
  field(HSV, "MINOR")
  field(HHSV, "MAJOR")
  info(autosaveFields_pass0, "HIGH HIHI")
}
record(ai, "ST99:Det:IOC_SIDet4:CBLOW_Q_OVERRUNS") {
  field(HIGH, "1")
  field(HIHI, "1")
  field(HSV, "MINOR")
  field(HHSV, "MAJOR")
  info(autosaveFields_pass0, "HIGH HIHI")
}
record(ai, "ST99:Det:IOC_SIDet4:CBMEDIUM_Q_OVERRUNS") {
  field(HIGH, "1")
  field(HIHI, "1")
  field(HSV, "MINOR")
  field(HHSV, "MAJOR")
  info(autosaveFields_pass0, "HIGH HIHI")
}
record(ai, "ST99:Det:IOC_SIDet4:CBHIGH_Q_OVERRUNS") {
  field(HIGH, "1")
  field(HIHI, "1")
  field(HSV, "MINOR")
  field(HHSV, "MAJOR")
  info(autosaveFields_pass0, "HIGH HIHI")
}

# ///
# /// Summarize the Q severity
# ///
record(calc, "ST99:Det:IOC_SIDet4:Q_SEVR") {
  field(INPA, "ST99:Det:IOC_SIDet4:SCANONCE_Q_USEDPER MS")
  field(INPB, "ST99:Det:IOC_SIDet4:CBLOW_Q_USEDPER MS")
  field(INPC, "ST99:Det:IOC_SIDet4:CBMEDIUM_Q_USEDPER MS")
  field(INPD, "ST99:Det:IOC_SIDet4:CBHIGH_Q_USEDPER MS")
  field(INPE, "ST99:Det:IOC_SIDet4:SCANONCE_Q_HIGHPER MS")
  field(INPF, "ST99:Det:IOC_SIDet4:CBLOW_Q_HIGHPER MS")
  field(INPG, "ST99:Det:IOC_SIDet4:CBMEDIUM_Q_HIGHPER MS")
  field(INPH, "ST99:Det:IOC_SIDet4:CBHIGH_Q_HIGHPER MS")
  field(INPI, "ST99:Det:IOC_SIDet4:SCANONCE_Q_OVERRUNS MS")
  field(INPJ, "ST99:Det:IOC_SIDet4:CBLOW_Q_OVERRUNS MS")
  field(INPK, "ST99:Det:IOC_SIDet4:CBMEDIUM_Q_OVERRUNS MS")
  field(INPL, "ST99:Det:IOC_SIDet4:CBHIGH_Q_OVERRUNS MS")
  field(FLNK, "ST99:Det:IOC_SIDet4:STATCALC")
}

# ///
# /// Top level status record
# ///
record(calcout, "ST99:Det:IOC_SIDet4:STATCALC") {
  field(DESC, "IOC Stat Status Calc")
  field(INPA, "ST99:Det:IOC_SIDet4:STATCTRL")
  field(INPB, "ST99:Det:IOC_SIDet4:SYS_CPU_LOAD.SEVR")
  field(INPC, "ST99:Det:IOC_SIDet4:IOC_CPU_LOAD.SEVR")
  field(INPD, "ST99:Det:IOC_SIDet4:CA_CLNT_CNT.SEVR")
  field(INPE, "ST99:Det:IOC_SIDet4:CA_CONN_CNT.SEVR")
  field(INPF, "ST99:Det:IOC_SIDet4:SUSP_TASK_CNT.SEVR")
  field(INPG, "ST99:Det:IOC_SIDet4:SCANMON_SEVR.SEVR")
  field(INPH, "ST99:Det:IOC_SIDet4:Q_SEVR.SEVR")
  field(INPI, "ST99:Det:IOC_SIDet4:MEM_USED_PER.SEVR")
  field(INPJ, "ST99:Det:IOC_SIDet4:FD_CNT_PER.SEVR")
  field(CALC, "A?0:(B>1||C>1||D>1||E>1||F>1||G>1||H>1||I>1||J>1)")
  field(OOPT, "Every Time")
  field(OUT, "ST99:Det:IOC_SIDet4:STATUS PP")
}
record(bo, "ST99:Det:IOC_SIDet4:STATUS") {
  field(DESC, "IOC Stat Status")
  field(ZNAM, "IOC Status OK")
  field(ONAM, "IOC Status Problem")
  field(ZSV, "NO_ALARM")
  field(OSV, "MAJOR")
  info(archive, "Monitor, 00:00:01, VAL")
}
record(bo, "ST99:Det:IOC_SIDet4:STATCTRL") {
  field(DESC, "IOC Stat Control")
  field(PINI, "YES")
  field(VAL, "0")
  field(ZNAM, "Alarm Enabled")
  field(ONAM, "Alarm Disabled")
  field(ZSV, "NO_ALARM")
  field(OSV, "MINOR")
  field(FLNK, "ST99:Det:IOC_SIDet4:STATCALC")
  info(autosaveFields_pass0, "VAL")
  info(archive, "Monitor, 00:00:01, VAL")
}
