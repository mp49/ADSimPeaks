
#=================================================================#
# Template file: ADBase.template
# Database for area detector control using asyn driver and standard asyn device support
# Mark Rivers
# March 9, 2008

#  Using SCANRATE:The ImageJ EPICS_AD_Viewer plugin monitors ArrayCounter_RBV to decide 
#  when there is a new image to display. That means that it will not display faster than
#  the SCANRATE you select.

#=================================================================#
# Template file: NDArrayBase.template
# Database for area detector control using asyn driver and standard asyn device support
# Mark Rivers
# March 9, 2008

###################################################################
#  This record contains the version of ADCore                     #
###################################################################

record(stringin, "ST99:Det:Det1:ADCoreVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D1.SIM,0,1)ADCORE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the version of the driver or plugin       #
###################################################################

record(stringin, "ST99:Det:Det1:DriverVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D1.SIM,0,1)DRIVER_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the asyn port name of this detector       #
###################################################################

record(stringin, "ST99:Det:Det1:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D1.SIM,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records contain basic information about the detector     # 
###################################################################

record(stringin, "ST99:Det:Det1:Manufacturer_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D1.SIM,0,1)MANUFACTURER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "ST99:Det:Det1:Model_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D1.SIM,0,1)MODEL")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "ST99:Det:Det1:SerialNumber_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D1.SIM,0,1)SERIAL_NUMBER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "ST99:Det:Det1:SDKVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D1.SIM,0,1)SDK_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "ST99:Det:Det1:FirmwareVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D1.SIM,0,1)FIRMWARE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control acquisition start and stop               #
###################################################################

record(bo, "ST99:Det:Det1:Acquire") {
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(D1.SIM,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ONAM, "Acquire")
   field(VAL,  "0")
   field(FLNK, "ST99:Det:Det1:SetAcquireBusy")
   info(asyn:READBACK, "1")
}

record(bi, "ST99:Det:Det1:Acquire_RBV") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(D1.SIM,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "ST99:Det:Det1:SetAcquireBusy")
{
    field(INPA, "ST99:Det:Det1:Acquire NPP")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(OUT,  "ST99:Det:Det1:AcquireBusy PP")
}

record(busy, "ST99:Det:Det1:AcquireBusy") {
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(VAL,  "0")
}

record(bi, "ST99:Det:Det1:AcquireBusyCB") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(D1.SIM,0,1)ACQUIRE_BUSY")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "ST99:Det:Det1:ClearAcquireBusy") {
    field(INPA, "ST99:Det:Det1:AcquireBusyCB CP")
    field(CALC, "A")
    field(OOPT, "Transition To Zero")
    field(OUT,  "ST99:Det:Det1:AcquireBusy PP")
}

record(bo, "ST99:Det:Det1:WaitForPlugins") {
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(D1.SIM,0,1)WAIT_FOR_PLUGINS")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
}

###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longout, "ST99:Det:Det1:NDimensions")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D1.SIM,0,1)ARRAY_NDIMENSIONS")
}

record(longin, "ST99:Det:Det1:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D1.SIM,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform records
record(waveform, "ST99:Det:Det1:Dimensions")
{
    field(DTYP, "asynInt32ArrayOut")
    field(INP,  "@asyn(D1.SIM,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "ST99:Det:Det1:Dim0SA")
}

record(subArray, "ST99:Det:Det1:Dim0SA")
{
    field(INP,  "ST99:Det:Det1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "ST99:Det:Det1:ArraySize0")
}

record(longin, "ST99:Det:Det1:ArraySize0")
{
    field(INP,  "ST99:Det:Det1:Dim0SA")
    field(FLNK, "ST99:Det:Det1:Dim1SA")
}

record(subArray, "ST99:Det:Det1:Dim1SA")
{
    field(INP,  "ST99:Det:Det1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "ST99:Det:Det1:ArraySize1")
}

record(longin, "ST99:Det:Det1:ArraySize1")
{
    field(INP,  "ST99:Det:Det1:Dim1SA")
    field(FLNK, "ST99:Det:Det1:Dim2SA")
}

record(subArray, "ST99:Det:Det1:Dim2SA")
{
    field(INP,  "ST99:Det:Det1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "ST99:Det:Det1:ArraySize2")
}

record(longin, "ST99:Det:Det1:ArraySize2")
{
    field(INP,  "ST99:Det:Det1:Dim2SA")
    field(FLNK, "ST99:Det:Det1:Dim3SA")
}

record(subArray, "ST99:Det:Det1:Dim3SA")
{
    field(INP,  "ST99:Det:Det1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "ST99:Det:Det1:ArraySize3")
}

record(longin, "ST99:Det:Det1:ArraySize3")
{
    field(INP,  "ST99:Det:Det1:Dim3SA")
    field(FLNK, "ST99:Det:Det1:Dim4SA")
}

record(subArray, "ST99:Det:Det1:Dim4SA")
{
    field(INP,  "ST99:Det:Det1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "ST99:Det:Det1:ArraySize4")
}

record(longin, "ST99:Det:Det1:ArraySize4")
{
    field(INP,  "ST99:Det:Det1:Dim4SA")
    field(FLNK, "ST99:Det:Det1:Dim5SA")
}

record(subArray, "ST99:Det:Det1:Dim5SA")
{
    field(INP,  "ST99:Det:Det1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "ST99:Det:Det1:ArraySize5")
}

record(longin, "ST99:Det:Det1:ArraySize5")
{
    field(INP,  "ST99:Det:Det1:Dim5SA")
    field(FLNK, "ST99:Det:Det1:Dim6SA")
}

record(subArray, "ST99:Det:Det1:Dim6SA")
{
    field(INP,  "ST99:Det:Det1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "ST99:Det:Det1:ArraySize6")
}

record(longin, "ST99:Det:Det1:ArraySize6")
{
    field(INP,  "ST99:Det:Det1:Dim6SA")
    field(FLNK, "ST99:Det:Det1:Dim7SA")
}

record(subArray, "ST99:Det:Det1:Dim7SA")
{
    field(INP,  "ST99:Det:Det1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "ST99:Det:Det1:ArraySize7")
}

record(longin, "ST99:Det:Det1:ArraySize7")
{
    field(INP,  "ST99:Det:Det1:Dim7SA")
    field(FLNK, "ST99:Det:Det1:Dim8SA")
}

record(subArray, "ST99:Det:Det1:Dim8SA")
{
    field(INP,  "ST99:Det:Det1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "ST99:Det:Det1:ArraySize8")
}

record(longin, "ST99:Det:Det1:ArraySize8")
{
    field(INP,  "ST99:Det:Det1:Dim8SA")
    field(FLNK, "ST99:Det:Det1:Dim9SA")
}

record(subArray, "ST99:Det:Det1:Dim9SA")
{
    field(INP,  "ST99:Det:Det1:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "ST99:Det:Det1:ArraySize9")
}

record(longin, "ST99:Det:Det1:ArraySize9")
{
    field(INP,  "ST99:Det:Det1:Dim9SA")
}


record(waveform, "ST99:Det:Det1:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(D1.SIM,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "ST99:Det:Det1:Dim0SA_RBV")
    field(SCAN, "I/O Intr")
}

record(subArray, "ST99:Det:Det1:Dim0SA_RBV")
{
    field(INP,  "ST99:Det:Det1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "ST99:Det:Det1:ArraySize0_RBV")
}

record(longin, "ST99:Det:Det1:ArraySize0_RBV")
{
    field(INP,  "ST99:Det:Det1:Dim0SA_RBV")
    field(FLNK, "ST99:Det:Det1:Dim1SA_RBV")
}

record(subArray, "ST99:Det:Det1:Dim1SA_RBV")
{
    field(INP,  "ST99:Det:Det1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "ST99:Det:Det1:ArraySize1_RBV")
}

record(longin, "ST99:Det:Det1:ArraySize1_RBV")
{
    field(INP,  "ST99:Det:Det1:Dim1SA_RBV")
    field(FLNK, "ST99:Det:Det1:Dim2SA_RBV")
}

record(subArray, "ST99:Det:Det1:Dim2SA_RBV")
{
    field(INP,  "ST99:Det:Det1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "ST99:Det:Det1:ArraySize2_RBV")
}

record(longin, "ST99:Det:Det1:ArraySize2_RBV")
{
    field(INP,  "ST99:Det:Det1:Dim2SA_RBV")
    field(FLNK, "ST99:Det:Det1:Dim3SA_RBV")
}

record(subArray, "ST99:Det:Det1:Dim3SA_RBV")
{
    field(INP,  "ST99:Det:Det1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "ST99:Det:Det1:ArraySize3_RBV")
}

record(longin, "ST99:Det:Det1:ArraySize3_RBV")
{
    field(INP,  "ST99:Det:Det1:Dim3SA_RBV")
    field(FLNK, "ST99:Det:Det1:Dim4SA_RBV")
}

record(subArray, "ST99:Det:Det1:Dim4SA_RBV")
{
    field(INP,  "ST99:Det:Det1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "ST99:Det:Det1:ArraySize4_RBV")
}

record(longin, "ST99:Det:Det1:ArraySize4_RBV")
{
    field(INP,  "ST99:Det:Det1:Dim4SA_RBV")
    field(FLNK, "ST99:Det:Det1:Dim5SA_RBV")
}

record(subArray, "ST99:Det:Det1:Dim5SA_RBV")
{
    field(INP,  "ST99:Det:Det1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "ST99:Det:Det1:ArraySize5_RBV")
}

record(longin, "ST99:Det:Det1:ArraySize5_RBV")
{
    field(INP,  "ST99:Det:Det1:Dim5SA_RBV")
    field(FLNK, "ST99:Det:Det1:Dim6SA_RBV")
}

record(subArray, "ST99:Det:Det1:Dim6SA_RBV")
{
    field(INP,  "ST99:Det:Det1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "ST99:Det:Det1:ArraySize6_RBV")
}

record(longin, "ST99:Det:Det1:ArraySize6_RBV")
{
    field(INP,  "ST99:Det:Det1:Dim6SA_RBV")
    field(FLNK, "ST99:Det:Det1:Dim7SA_RBV")
}

record(subArray, "ST99:Det:Det1:Dim7SA_RBV")
{
    field(INP,  "ST99:Det:Det1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "ST99:Det:Det1:ArraySize7_RBV")
}

record(longin, "ST99:Det:Det1:ArraySize7_RBV")
{
    field(INP,  "ST99:Det:Det1:Dim7SA_RBV")
    field(FLNK, "ST99:Det:Det1:Dim8SA_RBV")
}

record(subArray, "ST99:Det:Det1:Dim8SA_RBV")
{
    field(INP,  "ST99:Det:Det1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "ST99:Det:Det1:ArraySize8_RBV")
}

record(longin, "ST99:Det:Det1:ArraySize8_RBV")
{
    field(INP,  "ST99:Det:Det1:Dim8SA_RBV")
    field(FLNK, "ST99:Det:Det1:Dim9SA_RBV")
}

record(subArray, "ST99:Det:Det1:Dim9SA_RBV")
{
    field(INP,  "ST99:Det:Det1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "ST99:Det:Det1:ArraySize9_RBV")
}

record(longin, "ST99:Det:Det1:ArraySize9_RBV")
{
    field(INP,  "ST99:Det:Det1:Dim9SA_RBV")
}


record(mbbi, "ST99:Det:Det1:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D1.SIM,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det1:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D1.SIM,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det1:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D1.SIM,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det1:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D1.SIM,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det1:ArraySize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D1.SIM,0,1)ARRAY_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records have information on the compression              # 
###################################################################
record(stringin, "ST99:Det:Det1:Codec_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(D1.SIM,0,1)CODEC")
   field(VAL,  "")
   field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det1:CompressedSize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D1.SIM,0,1)COMPRESSED_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the data type                            # 
###################################################################

record(mbbo, "ST99:Det:Det1:DataType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D1.SIM,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "ST99:Det:Det1:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D1.SIM,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the color mode                           #
#  These choices must agree with NDColorMode_t in NDArray.h       # 
###################################################################

record(mbbo, "ST99:Det:Det1:ColorMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D1.SIM,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   info(autosaveFields, "VAL")
}

record(mbbi, "ST99:Det:Det1:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D1.SIM,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamps of the array     #
###################################################################
record(longin, "ST99:Det:Det1:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D1.SIM,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "ST99:Det:Det1:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(D1.SIM,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det1:EpicsTSSec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D1.SIM,0,1)EPICS_TS_SEC")
    field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det1:EpicsTSNsec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D1.SIM,0,1)EPICS_TS_NSEC")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "ST99:Det:Det1:ArrayCounter")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D1.SIM,0,1)ARRAY_COUNTER")
}

record(longin, "ST99:Det:Det1:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D1.SIM,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# Updated rate calculation to use a smoothing factor w/ guard against negative values
record(calc, "ST99:Det:Det1:ArrayRate_RBV")
{
    field(INPA, "ST99:Det:Det1:ArrayRate_RBV.LB NPP NMS")   # Previous counter value
    field(INPB, "ST99:Det:Det1:ArrayCounter_RBV NPP NMS")   # Current counter value
    field(INPC, "1.0")                                # Delta time in seconds
    field(INPD, "ST99:Det:Det1:ArrayRate_RBV.VAL NPP NMS")  # Previous rate
    field(INPE, "0.0")                 # Smoothing factor
    field(CALC, "(D*E)/C+MAX(0,B-A)*(1-E)/C")
    field(PREC, "2" )
    field(EGU,  "Hz" )
    field(SCAN, "1 second")
}

###################################################################
#  These records control NDArray callacks                         # 
###################################################################
record(bo, "ST99:Det:Det1:ArrayCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D1.SIM,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(VAL, "1")
    info(autosaveFields, "VAL")
}

record(bi, "ST99:Det:Det1:ArrayCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D1.SIM,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains macro definitions for the attributes      # 
###################################################################

record(waveform, "ST99:Det:Det1:NDAttributesMacros")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(D1.SIM,0,1)ND_ATTRIBUTES_MACROS")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record is the name of a file defining attributes          # 
###################################################################

record(waveform, "ST99:Det:Det1:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(D1.SIM,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record defines the status of reading attributes file      # 
###################################################################

record(mbbi, "ST99:Det:Det1:NDAttributesStatus")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D1.SIM,0,1)ND_ATTRIBUTES_STATUS")
    field(ZRVL, "0")
    field(ZRST, "Attributes file OK")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "File not found")
    field(ONSV, "MINOR")
    field(TWVL, "2")
    field(TWST, "XML syntax error")
    field(TWSV, "MAJOR")
    field(THVL, "3")
    field(THST, "Macro substitution error")
    field(THSV, "MAJOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
###################################################################

record(ai, "ST99:Det:Det1:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(D1.SIM,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "ST99:Det:Det1:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(D1.SIM,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "ST99:Det:Det1:PoolAllocBuffers")
   info(autosaveFields, "SCAN")
}

record(longin, "ST99:Det:Det1:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D1.SIM,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "ST99:Det:Det1:PoolFreeBuffers")
}

record(longin, "ST99:Det:Det1:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D1.SIM,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "ST99:Det:Det1:PoolUsedBuffers")
}

record(calc, "ST99:Det:Det1:PoolUsedBuffers")
{
    field(INPA, "ST99:Det:Det1:PoolAllocBuffers NPP MS")
    field(INPB, "ST99:Det:Det1:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

record(bo, "ST99:Det:Det1:EmptyFreeList")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D1.SIM,0,1)POOL_EMPTY_FREELIST")
}

record(longin, "ST99:Det:Det1:NumQueuedArrays")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D1.SIM,0,1)NUM_QUEUED_ARRAYS")
   field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det1:MaxSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D1.SIM,0,1)MAX_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det1:MaxSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D1.SIM,0,1)MAX_SIZE_Y")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the detector readout                     #
#  including binning, region start and size                       # 
###################################################################

record(longout, "ST99:Det:Det1:BinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D1.SIM,0,1)BIN_X")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "ST99:Det:Det1:BinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D1.SIM,0,1)BIN_X")
   field(SCAN, "I/O Intr")
}

record(longout, "ST99:Det:Det1:BinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D1.SIM,0,1)BIN_Y")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "ST99:Det:Det1:BinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D1.SIM,0,1)BIN_Y")
   field(SCAN, "I/O Intr")
}

record(longout, "ST99:Det:Det1:MinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D1.SIM,0,1)MIN_X")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(longin, "ST99:Det:Det1:MinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D1.SIM,0,1)MIN_X")
   field(SCAN, "I/O Intr")
}

record(longout, "ST99:Det:Det1:MinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D1.SIM,0,1)MIN_Y")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(longin, "ST99:Det:Det1:MinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D1.SIM,0,1)MIN_Y")
   field(SCAN, "I/O Intr")
}

record(longout, "ST99:Det:Det1:SizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D1.SIM,0,1)SIZE_X")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "ST99:Det:Det1:SizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D1.SIM,0,1)SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longout, "ST99:Det:Det1:SizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D1.SIM,0,1)SIZE_Y")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "ST99:Det:Det1:SizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D1.SIM,0,1)SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(bo, "ST99:Det:Det1:ReverseX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D1.SIM,0,1)REVERSE_X")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(bi, "ST99:Det:Det1:ReverseX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D1.SIM,0,1)REVERSE_X")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "ST99:Det:Det1:ReverseY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D1.SIM,0,1)REVERSE_Y")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(bi, "ST99:Det:Det1:ReverseY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D1.SIM,0,1)REVERSE_Y")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the acquisition time and                 #
#  period                                                         # 
###################################################################
record(ao, "ST99:Det:Det1:AcquireTime")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(D1.SIM,0,1)ACQ_TIME")
   field(PREC, "3")
   field(VAL,  "1.0")
   info(autosaveFields, "VAL")
}

record(ai, "ST99:Det:Det1:AcquireTime_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(D1.SIM,0,1)ACQ_TIME")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ao, "ST99:Det:Det1:AcquirePeriod")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(D1.SIM,0,1)ACQ_PERIOD")
   field(PREC, "3")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(ai, "ST99:Det:Det1:AcquirePeriod_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(D1.SIM,0,1)ACQ_PERIOD")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ai, "ST99:Det:Det1:TimeRemaining_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(D1.SIM,0,1)TIME_REMAINING")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the gain                                 # 
###################################################################
record(ao, "ST99:Det:Det1:Gain")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(D1.SIM,0,1)GAIN")
   field(VAL,  "1.0")
   field(PREC, "3")
   info(autosaveFields, "VAL")
}

record(ai, "ST99:Det:Det1:Gain_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(D1.SIM,0,1)GAIN")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the frame type                           # 
###################################################################
record(mbbo, "ST99:Det:Det1:FrameType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D1.SIM,0,1)FRAME_TYPE")
   field(ZRST, "Normal")
   field(ZRVL, "0")
   field(ONST, "Background")
   field(ONVL, "1")
   field(TWST, "FlatField")
   field(TWVL, "2")
   field(THST, "DblCorrelation")
   field(THVL, "3")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "ST99:Det:Det1:FrameType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D1.SIM,0,1)FRAME_TYPE")
   field(ZRST, "Normal")
   field(ZRVL, "0")
   field(ONST, "Background")
   field(ONVL, "1")
   field(TWST, "FlatField")
   field(TWVL, "2")
   field(THST, "DblCorrelation")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the acquisition mode                     # 
###################################################################
record(mbbo, "ST99:Det:Det1:ImageMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D1.SIM,0,1)IMAGE_MODE")
   field(ZRST, "Single")
   field(ZRVL, "0")
   field(ONST, "Multiple")
   field(ONVL, "1")
   field(TWST, "Continuous")
   field(TWVL, "2")
   field(VAL,  "2")
   info(autosaveFields, "VAL")
}

record(mbbi, "ST99:Det:Det1:ImageMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D1.SIM,0,1)IMAGE_MODE")
   field(ZRST, "Single")
   field(ZRVL, "0")
   field(ONST, "Multiple")
   field(ONVL, "1")
   field(TWST, "Continuous")
   field(TWVL, "2")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the trigger mode                         # 
###################################################################
record(mbbo, "ST99:Det:Det1:TriggerMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D1.SIM,0,1)TRIGGER_MODE")
   field(ZRST, "Internal")
   field(ZRVL, "0")
   field(ONST, "External")
   field(ONVL, "1")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "ST99:Det:Det1:TriggerMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D1.SIM,0,1)TRIGGER_MODE")
   field(ZRST, "Internal")
   field(ZRVL, "0")
   field(ONST, "External")
   field(ONVL, "1")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the number of exposures and              #
#  number of images                                               # 
###################################################################
record(longout, "ST99:Det:Det1:NumExposures")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D1.SIM,0,1)NEXPOSURES")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "ST99:Det:Det1:NumExposures_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D1.SIM,0,1)NEXPOSURES")
   field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det1:NumExposuresCounter_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D1.SIM,0,1)NEXPOSURES_COUNTER")
   field(SCAN, "I/O Intr")
}
record(longout, "ST99:Det:Det1:NumImages")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(D1.SIM,0,1)NIMAGES")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "ST99:Det:Det1:NumImages_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D1.SIM,0,1)NIMAGES")
   field(SCAN, "I/O Intr")
}

record(longin, "ST99:Det:Det1:NumImagesCounter_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(D1.SIM,0,1)NIMAGES_COUNTER")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are for the detector state                       # 
###################################################################

record(mbbi, "ST99:Det:Det1:DetectorState_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D1.SIM,0,1)STATUS")
    field(ZRST, "Idle")
    field(ZRVL, "0")
    field(ZRSV, "NO_ALARM")
    field(ONST, "Acquire")
    field(ONVL, "1")
    field(ONSV, "NO_ALARM")
    field(TWST, "Readout")
    field(TWVL, "2")
    field(TWSV, "NO_ALARM")
    field(THST, "Correct")
    field(THVL, "3")
    field(THSV, "NO_ALARM")
    field(FRST, "Saving")
    field(FRVL, "4")
    field(FRSV, "NO_ALARM")
    field(FVST, "Aborting")
    field(FVVL, "5")
    field(FVSV, "MINOR")
    field(SXST, "Error")
    field(SXVL, "6")
    field(SXSV, "MAJOR")
    field(SVST, "Waiting")
    field(SVVL, "7")
    field(SVSV, "NO_ALARM")
    field(EIST, "Initializing")
    field(EIVL, "8")
    field(EISV, "NO_ALARM")
    field(NIST, "Disconnected")
    field(NIVL, "9")
    field(NISV, "INVALID")
    field(TEST, "Aborted")
    field(TEVL, "10")
    field(TESV, "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide status information                       # 
###################################################################

# Status message.
record(waveform, "ST99:Det:Det1:StatusMessage_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(D1.SIM,0,1)STATUS_MESSAGE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(waveform, "ST99:Det:Det1:StringToServer_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(D1.SIM,0,1)STRING_TO_SERVER")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(waveform, "ST99:Det:Det1:StringFromServer_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(D1.SIM,0,1)STRING_FROM_SERVER")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

################################################################@###
#  This record can be used to force a read of the detector status  # 
####################################################################
record(bo,"ST99:Det:Det1:ReadStatus") {
    field(DTYP,"asynInt32")
    field(OUT, "@asyn(D1.SIM,0,1)READ_STATUS")
    field(VAL, "1")
    field(SCAN,"Passive")
    info(autosaveFields, "SCAN")
}

###################################################################
#  These records control the shutter                              # 
###################################################################

record(mbbo, "ST99:Det:Det1:ShutterMode")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D1.SIM,0,1)SHUTTER_MODE")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "EPICS PV")
    field(ONVL, "1")
    field(TWST, "Detector output")
    field(TWVL, "2")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(mbbi, "ST99:Det:Det1:ShutterMode_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D1.SIM,0,1)SHUTTER_MODE")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "EPICS PV")
    field(ONVL, "1")
    field(TWST, "Camera output")
    field(TWVL, "2")
    field(SCAN, "I/O Intr")
}

record(bo, "ST99:Det:Det1:ShutterControl")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(D1.SIM,0,1)SHUTTER_CONTROL")
    field(ZNAM, "Close")
    field(ONAM, "Open")
    field(VAL,  "0")
}

record(bi, "ST99:Det:Det1:ShutterControl_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D1.SIM,0,1)SHUTTER_CONTROL")
    field(ZNAM, "Close")
    field(ONAM, "Open")
    field(SCAN, "I/O Intr")
}

record(bi, "ST99:Det:Det1:ShutterStatus_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D1.SIM,0,1)SHUTTER_STATUS")
    field(ZNAM, "Closed")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Open")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "ST99:Det:Det1:ShutterOpenDelay")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(D1.SIM,0,1)SHUTTER_OPEN_DELAY")
   field(PREC, "3")
   field(VAL,  "0.0")
   info(autosaveFields, "VAL")
}

record(ai, "ST99:Det:Det1:ShutterOpenDelay_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(D1.SIM,0,1)SHUTTER_OPEN_DELAY")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ao, "ST99:Det:Det1:ShutterCloseDelay")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(D1.SIM,0,1)SHUTTER_CLOSE_DELAY")
   field(PREC, "3")
   field(VAL,  "0.0")
   info(autosaveFields, "VAL")
}

record(ai, "ST99:Det:Det1:ShutterCloseDelay_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(D1.SIM,0,1)SHUTTER_CLOSE_DELAY")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

# This record changes state when the driver opens/closes an EPICS shutter
record(bi, "ST99:Det:Det1:ShutterControlEPICS")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(D1.SIM,0,1)SHUTTER_CONTROL_EPICS")
    field(ZNAM, "Closed")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Open")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
    field(FLNK, "ST99:Det:Det1:ShutterFanout.PROC")
}

record(fanout, "ST99:Det:Det1:ShutterFanout")
{
    field(LNK1, "ST99:Det:Det1:ShutterOpenEPICS.PROC PP MS")
    field(LNK2, "ST99:Det:Det1:ShutterCloseEPICS.PROC PP MS")
}

record(calcout, "ST99:Det:Det1:ShutterOpenEPICS")
{
    field(INPA, "ST99:Det:Det1:ShutterControlEPICS.VAL NPP NMS")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "1")
    field(OUT,  "")
    info(autosaveFields, "OUT OCAL")
}

record(calcout, "ST99:Det:Det1:ShutterCloseEPICS")
{
    field(INPA, "ST99:Det:Det1:ShutterControlEPICS.VAL NPP NMS")
    field(CALC, "A")
    field(OOPT, "Transition To Zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "0")
    field(OUT,  "")
    info(autosaveFields, "OUT OCAL")
}

record(mbbi, "ST99:Det:Det1:ShutterStatusEPICS_RBV")
{
    field(DTYP, "Raw Soft Channel")
    field(INP,  "test CP MS")
    field(ZRVL, "0")
    field(ZRST, "Closed")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "Open")
    field(ONSV, "MINOR")
    info(autosaveFields, "INP ZRVL ONVL")
}

###################################################################
#  These records control the detector temperature                 # 
###################################################################
 
record(ao, "ST99:Det:Det1:Temperature")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(D1.SIM,0,1)TEMPERATURE")
   field(PREC, "1")
   field(EGU,  "C")
   field(VAL,  "25.0")
   info(autosaveFields, "VAL")
}

record(ai, "ST99:Det:Det1:Temperature_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(D1.SIM,0,1)TEMPERATURE")
   field(PREC, "1")
   field(EGU,  "C")
   field(SCAN, "I/O Intr")
}

record(ai, "ST99:Det:Det1:TemperatureActual")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(D1.SIM,0,1)TEMPERATURE_ACTUAL")
   field(PREC, "1")
   field(EGU,  "C")
   field(SCAN, "I/O Intr")
}


###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"ST99:Det:Det1:AsynIO")
{
    field(PORT, "D1.SIM")
    field(TIB2,"1")
    info("ADType", "ADDriver")
}


# ///
# /// Control profile integration 
# ///
record(bo, "ST99:Det:Det1:Integrate") {
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(D1.SIM,0,1)ADSP_INTEGRATE")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields, "VAL")
}

